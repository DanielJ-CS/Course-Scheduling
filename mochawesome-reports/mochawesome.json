{
  "reportTitle": "cpsc310project",
  "stats": {
    "suites": 5,
    "tests": 86,
    "passes": 85,
    "pending": 0,
    "failures": 1,
    "start": "2016-11-09T03:08:11.007Z",
    "end": "2016-11-09T03:08:15.131Z",
    "duration": 4124,
    "testsRegistered": 86,
    "passPercent": 98.8,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "DatasetController",
        "suites": [],
        "tests": [
          {
            "title": "Should throw error on zip without any valid data file under courses",
            "fullTitle": "DatasetController Should throw error on zip without any valid data file under courses",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "Util_1.default.test(<span class=\"hljs-string\">'Creating dataset'</span>);<br><span class=\"hljs-keyword\">var</span> content = { key: <span class=\"hljs-string\">'value'</span> };<br><span class=\"hljs-keyword\">var</span> zip = <span class=\"hljs-keyword\">new</span> JSZip();<br>zip.file(<span class=\"hljs-string\">'content.obj'</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(content));<br><span class=\"hljs-keyword\">var</span> opts = {<br>    compression: <span class=\"hljs-string\">'deflate'</span>, compressionOptions: { level: <span class=\"hljs-number\">2</span> }, type: <span class=\"hljs-string\">'base64'</span><br>};<br><span class=\"hljs-keyword\">return</span> zip.generateAsync(opts).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    Util_1.default.test(<span class=\"hljs-string\">'Dataset created '</span>);<br>    Util_1.default.test(data);<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>    controller.process(<span class=\"hljs-string\">'courses'</span>, data).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>        chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"should throw error on zip without any valid data file under courses/\"</span>);<br>    }).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>        <span class=\"hljs-keyword\">throw</span> err;<br>    });<br>}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"should throw error on zip without any valid data file under courses/\"</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "57fdcf02-ab7d-4792-b105-9bad81955be8",
            "parentUUID": "05c351f7-0891-47fc-bfdf-fac39058d416",
            "skipped": false
          },
          {
            "title": "Should be able to process a rooms zip",
            "fullTitle": "DatasetController Should be able to process a rooms zip",
            "timedOut": false,
            "duration": 340,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> expectedObj = [<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'1012'</span>, rooms_name: <span class=\"hljs-string\">'ESB_1012'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">150</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Hybrid Furniture'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-1012'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'1013'</span>, rooms_name: <span class=\"hljs-string\">'ESB_1013'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">350</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-1013'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'2012'</span>, rooms_name: <span class=\"hljs-string\">'ESB_2012'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">80</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-2012'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'101'</span>, rooms_name: <span class=\"hljs-string\">'DMP_101'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">40</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-101'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'110'</span>, rooms_name: <span class=\"hljs-string\">'DMP_110'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">120</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-110'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'201'</span>, rooms_name: <span class=\"hljs-string\">'DMP_201'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">40</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-201'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'301'</span>, rooms_name: <span class=\"hljs-string\">'DMP_301'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">80</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-301'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'310'</span>, rooms_name: <span class=\"hljs-string\">'DMP_310'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">160</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-310'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'100'</span>, rooms_name: <span class=\"hljs-string\">'MATH_100'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">224</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-100'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'102'</span>, rooms_name: <span class=\"hljs-string\">'MATH_102'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">60</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-102'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'104'</span>, rooms_name: <span class=\"hljs-string\">'MATH_104'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">48</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-104'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'105'</span>, rooms_name: <span class=\"hljs-string\">'MATH_105'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-105'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'202'</span>, rooms_name: <span class=\"hljs-string\">'MATH_202'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-202'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'203'</span>, rooms_name: <span class=\"hljs-string\">'MATH_203'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">48</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-203'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'204'</span>, rooms_name: <span class=\"hljs-string\">'MATH_204'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-204'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'225'</span>, rooms_name: <span class=\"hljs-string\">'MATH_225'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">25</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-225'</span> },<br>];<br>Util_1.default.test(<span class=\"hljs-string\">\"Reading test zip file\"</span>);<br><span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-string\">'rooms'</span>;<br><span class=\"hljs-keyword\">var</span> content = fs.readFileSync(<span class=\"hljs-string\">\"./rooms-small.zip\"</span>).toString(<span class=\"hljs-string\">'base64'</span>);<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>Util_1.default.test(<span class=\"hljs-string\">\"Finished reading test zip file, parsing zip...\"</span>);<br><span class=\"hljs-keyword\">return</span> controller.process(id, content).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resCode</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> controller.getDatasets().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">datasets</span>) </span>{<br>        chai_1.expect(datasets[id]).to.deep.equal(expectedObj);<br>    });<br>});",
            "err": {
              "name": "AssertionError",
              "message": "expected [ Array(16) ] to deeply equal [ Array(16) ]",
              "stack": "AssertionError: expected [ Array(16) ] to deeply equal [ Array(16) ]<br>    at Assertion.assertEqual (node_modules/chai/lib/chai/core/assertions.js:485:19)<br>    at Assertion.ctx.(anonymous function) [as equal] (node_modules/chai/lib/chai/utils/addMethod.js:41:25)<br>    at test/DatasetControllerSpec.js:141:53<br>    at process._tickCallback (internal/process/next_tick.js:103:7)"
            },
            "isRoot": false,
            "uuid": "3167232c-a7c5-4f05-a07f-32a49f544d6f",
            "parentUUID": "05c351f7-0891-47fc-bfdf-fac39058d416",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "/test/DatasetControllerSpec.js",
        "uuid": "05c351f7-0891-47fc-bfdf-fac39058d416",
        "fullFile": "/Users/Daniel/Desktop/cpsc310project/test/DatasetControllerSpec.js",
        "passes": [
          {
            "title": "Should throw error on zip without any valid data file under courses",
            "fullTitle": "DatasetController Should throw error on zip without any valid data file under courses",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "Util_1.default.test(<span class=\"hljs-string\">'Creating dataset'</span>);<br><span class=\"hljs-keyword\">var</span> content = { key: <span class=\"hljs-string\">'value'</span> };<br><span class=\"hljs-keyword\">var</span> zip = <span class=\"hljs-keyword\">new</span> JSZip();<br>zip.file(<span class=\"hljs-string\">'content.obj'</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(content));<br><span class=\"hljs-keyword\">var</span> opts = {<br>    compression: <span class=\"hljs-string\">'deflate'</span>, compressionOptions: { level: <span class=\"hljs-number\">2</span> }, type: <span class=\"hljs-string\">'base64'</span><br>};<br><span class=\"hljs-keyword\">return</span> zip.generateAsync(opts).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    Util_1.default.test(<span class=\"hljs-string\">'Dataset created '</span>);<br>    Util_1.default.test(data);<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>    controller.process(<span class=\"hljs-string\">'courses'</span>, data).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>        chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"should throw error on zip without any valid data file under courses/\"</span>);<br>    }).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>        <span class=\"hljs-keyword\">throw</span> err;<br>    });<br>}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"should throw error on zip without any valid data file under courses/\"</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "57fdcf02-ab7d-4792-b105-9bad81955be8",
            "parentUUID": "05c351f7-0891-47fc-bfdf-fac39058d416",
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "Should be able to process a rooms zip",
            "fullTitle": "DatasetController Should be able to process a rooms zip",
            "timedOut": false,
            "duration": 340,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> expectedObj = [<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'1012'</span>, rooms_name: <span class=\"hljs-string\">'ESB_1012'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">150</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Hybrid Furniture'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-1012'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'1013'</span>, rooms_name: <span class=\"hljs-string\">'ESB_1013'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">350</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-1013'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'2012'</span>, rooms_name: <span class=\"hljs-string\">'ESB_2012'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">80</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-2012'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'101'</span>, rooms_name: <span class=\"hljs-string\">'DMP_101'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">40</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-101'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'110'</span>, rooms_name: <span class=\"hljs-string\">'DMP_110'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">120</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-110'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'201'</span>, rooms_name: <span class=\"hljs-string\">'DMP_201'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">40</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-201'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'301'</span>, rooms_name: <span class=\"hljs-string\">'DMP_301'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">80</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-301'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'310'</span>, rooms_name: <span class=\"hljs-string\">'DMP_310'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">160</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-310'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'100'</span>, rooms_name: <span class=\"hljs-string\">'MATH_100'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">224</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-100'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'102'</span>, rooms_name: <span class=\"hljs-string\">'MATH_102'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">60</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-102'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'104'</span>, rooms_name: <span class=\"hljs-string\">'MATH_104'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">48</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-104'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'105'</span>, rooms_name: <span class=\"hljs-string\">'MATH_105'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-105'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'202'</span>, rooms_name: <span class=\"hljs-string\">'MATH_202'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-202'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'203'</span>, rooms_name: <span class=\"hljs-string\">'MATH_203'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">48</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-203'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'204'</span>, rooms_name: <span class=\"hljs-string\">'MATH_204'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-204'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'225'</span>, rooms_name: <span class=\"hljs-string\">'MATH_225'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">25</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-225'</span> },<br>];<br>Util_1.default.test(<span class=\"hljs-string\">\"Reading test zip file\"</span>);<br><span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-string\">'rooms'</span>;<br><span class=\"hljs-keyword\">var</span> content = fs.readFileSync(<span class=\"hljs-string\">\"./rooms-small.zip\"</span>).toString(<span class=\"hljs-string\">'base64'</span>);<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>Util_1.default.test(<span class=\"hljs-string\">\"Finished reading test zip file, parsing zip...\"</span>);<br><span class=\"hljs-keyword\">return</span> controller.process(id, content).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resCode</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> controller.getDatasets().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">datasets</span>) </span>{<br>        chai_1.expect(datasets[id]).to.deep.equal(expectedObj);<br>    });<br>});",
            "err": {
              "name": "AssertionError",
              "message": "expected [ Array(16) ] to deeply equal [ Array(16) ]",
              "stack": "AssertionError: expected [ Array(16) ] to deeply equal [ Array(16) ]<br>    at Assertion.assertEqual (node_modules/chai/lib/chai/core/assertions.js:485:19)<br>    at Assertion.ctx.(anonymous function) [as equal] (node_modules/chai/lib/chai/utils/addMethod.js:41:25)<br>    at test/DatasetControllerSpec.js:141:53<br>    at process._tickCallback (internal/process/next_tick.js:103:7)"
            },
            "isRoot": false,
            "uuid": "3167232c-a7c5-4f05-a07f-32a49f544d6f",
            "parentUUID": "05c351f7-0891-47fc-bfdf-fac39058d416",
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 380
      },
      {
        "title": "InsightFacade",
        "suites": [],
        "tests": [
          {
            "title": "removeDataset::Should delete datasets",
            "fullTitle": "InsightFacade removeDataset::Should delete datasets",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> datasetController = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br><span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>Util_1.default.test(<span class=\"hljs-string\">'InsightFacade.removeDataset tests'</span>);<br>chai_1.expect(insightFacade.removeDataset(<span class=\"hljs-string\">'courses'</span>)) != <span class=\"hljs-literal\">null</span>;",
            "isRoot": false,
            "uuid": "58c9eb1a-7152-4906-bfae-ab35eec378ef",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "addDataset::('InsightFacade::removeDataset(..) - ERROR: ' + err.message",
            "fullTitle": "InsightFacade addDataset::('InsightFacade::removeDataset(..) - ERROR: ' + err.message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> datasetController = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.addDataset(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "8a863eff-0b4e-4f51-a86f-95194efd2932",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "performQuery::('InsightFacade::performQuery(..) - ERROR: ' + err.message",
            "fullTitle": "InsightFacade performQuery::('InsightFacade::performQuery(..) - ERROR: ' + err.message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"class_id\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "5c199ec5-3c0c-4619-8205-79d07ccf6239",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "PerformQuery()::Should reject with 400 error",
            "fullTitle": "InsightFacade PerformQuery()::Should reject with 400 error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.removeDataset(<span class=\"hljs-string\">'class'</span>);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "db1905c0-f248-4b44-ba20-835e815e47c0",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "deleteDataset()::Should reject with 400 error",
            "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'errorCase\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "9bbb77c1-f9f2-4bca-9ed6-1688440c0cc5",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "deleteDataset()::Should reject with 400 error",
            "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'courses_nonsense\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_nothere\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "703a6d42-f0b3-43b2-9524-4edef36a994d",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "deleteDataset()::Should reject with 400 error",
            "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'courses_nonsense\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_id\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "15314a70-f1a5-483d-9117-9ab2de7c085a",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "/test/InsightFacadeSpec.js",
        "uuid": "106aab29-30e5-4fd5-ab78-43a95b630459",
        "fullFile": "/Users/Daniel/Desktop/cpsc310project/test/InsightFacadeSpec.js",
        "passes": [
          {
            "title": "removeDataset::Should delete datasets",
            "fullTitle": "InsightFacade removeDataset::Should delete datasets",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> datasetController = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br><span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>Util_1.default.test(<span class=\"hljs-string\">'InsightFacade.removeDataset tests'</span>);<br>chai_1.expect(insightFacade.removeDataset(<span class=\"hljs-string\">'courses'</span>)) != <span class=\"hljs-literal\">null</span>;",
            "isRoot": false,
            "uuid": "58c9eb1a-7152-4906-bfae-ab35eec378ef",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "addDataset::('InsightFacade::removeDataset(..) - ERROR: ' + err.message",
            "fullTitle": "InsightFacade addDataset::('InsightFacade::removeDataset(..) - ERROR: ' + err.message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> datasetController = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.addDataset(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "8a863eff-0b4e-4f51-a86f-95194efd2932",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "performQuery::('InsightFacade::performQuery(..) - ERROR: ' + err.message",
            "fullTitle": "InsightFacade performQuery::('InsightFacade::performQuery(..) - ERROR: ' + err.message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"class_id\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "5c199ec5-3c0c-4619-8205-79d07ccf6239",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "PerformQuery()::Should reject with 400 error",
            "fullTitle": "InsightFacade PerformQuery()::Should reject with 400 error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.removeDataset(<span class=\"hljs-string\">'class'</span>);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "db1905c0-f248-4b44-ba20-835e815e47c0",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "deleteDataset()::Should reject with 400 error",
            "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'errorCase\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "9bbb77c1-f9f2-4bca-9ed6-1688440c0cc5",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "deleteDataset()::Should reject with 400 error",
            "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'courses_nonsense\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_nothere\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "703a6d42-f0b3-43b2-9524-4edef36a994d",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          },
          {
            "title": "deleteDataset()::Should reject with 400 error",
            "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'courses_nonsense\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_id\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
            "isRoot": false,
            "uuid": "15314a70-f1a5-483d-9117-9ab2de7c085a",
            "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 7,
        "totalPasses": 7,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "QueryController",
        "suites": [],
        "tests": [
          {
            "title": "Should return a StringFilter parsed object",
            "fullTitle": "QueryController Should return a StringFilter parsed object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">\"cpsc\"</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_dept: <span class=\"hljs-string\">'adhe'</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_dept: <span class=\"hljs-string\">'cpsc'</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_dept: <span class=\"hljs-number\">1234</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for adhe == cpsc'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for cpsc == cpsc'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 1234 == cpsc'</span>);",
            "isRoot": false,
            "uuid": "bb99a935-0dd1-46f5-8273-c7a46ef2e45a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a NumberFilter::GT parsed object",
            "fullTitle": "QueryController Should return a NumberFilter::GT parsed object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 89.99 &gt; 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.00 &gt; 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return false for 90.01 &gt; 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf &gt; 90'</span>);",
            "isRoot": false,
            "uuid": "a22ac46c-2f93-4bd7-9e51-67d833fdda0b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a NumberFilter::EQ parsed object",
            "fullTitle": "QueryController Should return a NumberFilter::EQ parsed object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"EQ\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 89.99 == 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for 90.00 == 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.01 == 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf == 90'</span>);",
            "isRoot": false,
            "uuid": "a2ae8534-1adc-48e7-a639-fb7d05e8c53a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a NumberFilter::LT parsed object",
            "fullTitle": "QueryController Should return a NumberFilter::LT parsed object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"LT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for 89.99 &lt; 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.00 &lt; 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.01 &lt; 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf &lt; 90'</span>);",
            "isRoot": false,
            "uuid": "f7d0aaf2-e385-4dac-8e9c-a8978ac513a9",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a LogicFilter::AND parsed object",
            "fullTitle": "QueryController Should return a LogicFilter::AND parsed object",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = {<br>    <span class=\"hljs-string\">\"AND\"</span>: [<br>        { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } },<br>        { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } }]<br>};<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">70</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">'cpsc'</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">71</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-number\">72</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row5 = { courses_avg: <span class=\"hljs-string\">'asdf'</span>, courses_dept: <span class=\"hljs-string\">\"asdf\"</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and adhe == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 71 &gt; 70 and adhe == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and cpsc == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 71 &gt; 70 and cpsc == cpsc are both true'</span>);<br>chai_1.assert(filter.test(row5) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because asdf &gt; 70 and asdf == cpsc are not both true'</span>);",
            "isRoot": false,
            "uuid": "52405883-5084-4bfa-8d21-72fc4b3804bb",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a StringFilter::OR parsed object",
            "fullTitle": "QueryController Should return a StringFilter::OR parsed object",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = {<br>    <span class=\"hljs-string\">\"OR\"</span>: [<br>        { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } },<br>        { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } }]<br>};<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">70</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">'cpsc'</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">71</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-number\">72</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row5 = { courses_avg: <span class=\"hljs-string\">'asdf'</span>, courses_dept: <span class=\"hljs-string\">\"asdf\"</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and adhe == cpsc are both false'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 71 &gt; 70 and adhe == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 58 &gt; 70 and cpsc == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 72 &gt; 70 and cpsc == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row5) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because asdf &gt; 70 and asdf == cpsc are both false'</span>);",
            "isRoot": false,
            "uuid": "4e8371a9-f370-4e57-912e-043436b0d5b2",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a NegationFilter parsed object",
            "fullTitle": "QueryController Should return a NegationFilter parsed object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"LT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'child'</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'child'</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for !(89.99 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(90.00 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(90.01 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(asdf &lt; 90)'</span>);",
            "isRoot": false,
            "uuid": "8b8976b3-4099-4375-8521-2a8e23064be0",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error for null WHERE Object",
            "fullTitle": "QueryController Should return error for null WHERE Object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "22238eff-979d-413d-8481-4d0b10bb32e7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error for multiple keys in WHERE",
            "fullTitle": "QueryController Should return error for multiple keys in WHERE",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> }, <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "e8a10c64-ff50-49f7-b160-58231a482cc7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error for unknown key in WHERE",
            "fullTitle": "QueryController Should return error for unknown key in WHERE",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"HOW\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "309c1db6-52ac-4d46-bb54-bbd67d3dfdd7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error for undefined WHERE Object",
            "fullTitle": "QueryController Should return error for undefined WHERE Object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">undefined</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "4060025d-43cf-4ac0-a787-b059d01dbce8",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "LogicFilter should return error if not given array",
            "fullTitle": "QueryController LogicFilter should return error if not given array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">'IS'</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "f151a21a-8cea-4513-8ac9-0585dac73b9c",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "LogicFilter should return error if given empty array",
            "fullTitle": "QueryController LogicFilter should return error if given empty array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "8bbe6302-5465-461f-b900-8b34761ff83b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "LogicFilter should return error for unknown key",
            "fullTitle": "QueryController LogicFilter should return error for unknown key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'XOR'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "9629f325-3be1-4f07-8433-6f6feae0a889",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error if leaf filter has no key-value pairs",
            "fullTitle": "QueryController Should return error if leaf filter has no key-value pairs",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: {} }, { <span class=\"hljs-string\">\"IS\"</span>: {} }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "4fe829fc-4ce6-457b-8b62-47f942014c3c",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error if LogicFilter.parse() given invalid key",
            "fullTitle": "QueryController Should return error if LogicFilter.parse() given invalid key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } }, { <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"adhe\"</span> } } }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'notValid'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "1f4fa0d8-152c-4ddc-a83f-101dc76b19a1",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for empty key",
            "fullTitle": "QueryController NumberFilter:: Should return error for empty key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"90\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "a02dc88b-8427-4452-b56e-f8b240fdfed7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for undefined Object",
            "fullTitle": "QueryController NumberFilter:: Should return error for undefined Object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "7ea347f5-9e36-42f4-9017-dda107e11e00",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for NaN",
            "fullTitle": "QueryController NumberFilter:: Should return error for NaN",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"abc\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "9412a86f-96f5-46bf-816e-7dd303e44649",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for having more than one key",
            "fullTitle": "QueryController NumberFilter:: Should return error for having more than one key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span>, <span class=\"hljs-string\">\"courses_audit\"</span>: <span class=\"hljs-number\">10</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "de049f37-e9a0-4fdb-8004-521e567d1314",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for undefined value",
            "fullTitle": "QueryController NumberFilter:: Should return error for undefined value",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-literal\">undefined</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "ed5b839c-9243-45c3-8311-c126b24e45d6",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for unknown key",
            "fullTitle": "QueryController NumberFilter:: Should return error for unknown key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'unknownKey'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "6095c84c-84d7-4236-b4d8-7adcedb2239b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "StringFilter:: Should return error for undefined Object",
            "fullTitle": "QueryController StringFilter:: Should return error for undefined Object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "daff2bae-d327-4d88-bd82-00906c4c449c",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "StringFilter:: Should return error for more than one key",
            "fullTitle": "QueryController StringFilter:: Should return error for more than one key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span>, <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"90\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'IS'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "c2e1ffdd-c7ca-4861-b16d-d51d93f8a920",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "StringFilter:: Should return error if no key-value pair given",
            "fullTitle": "QueryController StringFilter:: Should return error if no key-value pair given",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = {};<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'IS'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "0b16cba1-c949-4371-86ec-f7b60fff7027",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "StringFilter:: Should return error for unknown key",
            "fullTitle": "QueryController StringFilter:: Should return error for unknown key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_key\"</span>: <span class=\"hljs-string\">\"\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'NO'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "deae8791-a6c9-4475-b40e-54b70bdc1ff5",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NegationFilter:: Should return error for null",
            "fullTitle": "QueryController NegationFilter:: Should return error for null",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NegationFilter.parse(<span class=\"hljs-string\">'NOT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NegationFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NegationFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "d9c5715d-1540-4230-9df5-cfad6fd17b33",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NegationFilter:: Should return error for unknown key",
            "fullTitle": "QueryController NegationFilter:: Should return error for unknown key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NegationFilter.parse(<span class=\"hljs-string\">'WHO'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NegationFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NegationFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "cf962142-eb17-4233-81b9-f4e4206d20b1",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::query.GET should be an array of string",
            "fullTitle": "QueryController QueryController::query.GET should be an array of string",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">99</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: <span class=\"hljs-string\">'notArray'</span>,<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "11808ad5-1436-4bb3-8bd8-83c2dea91ff7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::query.ORDER should be string or object and have key(s) in GET",
            "fullTitle": "QueryController QueryController::query.ORDER should be string or object and have key(s) in GET",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"ORDER\"</span>: <span class=\"hljs-string\">'courses_audit'</span>,<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"notInGET\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: <span class=\"hljs-number\">98</span>,<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "09276a18-2068-4942-95dc-3686b6deb9cf",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP should be array not object",
            "fullTitle": "QueryController QueryController::GROUP should be array not object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_dept\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: { <span class=\"hljs-string\">'GROUP'</span>: <span class=\"hljs-number\">768</span> },<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "4672c951-3008-4fc5-92f1-49312be74fb7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP array should not be empty",
            "fullTitle": "QueryController QueryController::GROUP array should not be empty",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "e58310e4-e8ce-4dd0-9764-687e03f0aa6d",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP should be array of string not array of object",
            "fullTitle": "QueryController QueryController::GROUP should be array of string not array of object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [{ <span class=\"hljs-string\">\"okay\"</span>: <span class=\"hljs-number\">789</span> }],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "e5370e40-76ea-425d-b82b-7b7ba42e456a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: GROUP should be array of string not array of number",
            "fullTitle": "QueryController QueryController:: GROUP should be array of string not array of number",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">77</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "912c5186-247e-4cf4-b6fd-40e585f81e2b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GET keys should be in GROUP or APPLY",
            "fullTitle": "QueryController QueryController::GET keys should be in GROUP or APPLY",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_audit\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "41097701-5364-4823-9a1d-77d19a3d19bf",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::APPLY should be array not object",
            "fullTitle": "QueryController QueryController::APPLY should be array not object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: {},<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "92b940c9-d905-4b3f-8127-16906eb8bc64",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should be array not number",
            "fullTitle": "QueryController QueryController:: APPLY should be array not number",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: <span class=\"hljs-number\">76</span>,<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "d849738f-fcc2-4462-a19e-33594bccc286",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::APPLY should be array of object not array of string",
            "fullTitle": "QueryController QueryController::APPLY should be array of object not array of string",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [<span class=\"hljs-string\">'notObject'</span>],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "0631b55a-eb25-41a2-8d61-9088e532df1b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should be array of object not array of number",
            "fullTitle": "QueryController QueryController:: APPLY should be array of object not array of number",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [<span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">88</span>],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "c2c82421-a56f-4ec8-b786-f18f1170364b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP and APPLY should be present if extra columns provided in GET",
            "fullTitle": "QueryController QueryController::GROUP and APPLY should be present if extra columns provided in GET",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "6da8d828-d5ff-4b4d-9315-38c6a5cd26aa",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::APPLY should be present if GROUP is present",
            "fullTitle": "QueryController QueryController::APPLY should be present if GROUP is present",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "b40a4d28-d7fb-480b-a0ba-159f69b110d5",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP should be present if APPLY is present",
            "fullTitle": "QueryController QueryController::GROUP should be present if APPLY is present",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "d4b53ee8-c933-43d0-aabe-c0dedbe90511",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: isValid expected to be false when null",
            "fullTitle": "QueryController QueryController:: isValid expected to be false when null",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = <span class=\"hljs-literal\">null</span>;<br>chai_1.expect(QueryController_1.default.isValid(query)).to.be.false;",
            "isRoot": false,
            "uuid": "0f345725-4a72-439d-8e27-ba7888107f0d",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: isValid expected to be true when not null",
            "fullTitle": "QueryController QueryController:: isValid expected to be true when not null",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"notInGET\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br>chai_1.expect(QueryController_1.default.isValid(query)).to.be.true;",
            "isRoot": false,
            "uuid": "3d70edca-5fb5-4dff-9e60-3654b101dab6",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER keys should be array",
            "fullTitle": "QueryController QueryController:: ORDER keys should be array",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: <span class=\"hljs-string\">\"notInGET\"</span> },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "fb79a594-5165-4151-a06c-8983d7c75af9",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER keys array should not be empty",
            "fullTitle": "QueryController QueryController:: ORDER keys array should not be empty",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "817ed5d7-651e-4a5f-8ae5-19c46200399d",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER keys should be in GET",
            "fullTitle": "QueryController QueryController:: ORDER keys should be in GET",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">'asdf'</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "8dbb7773-a63b-4d23-8c54-c461321e6b2a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER keys should be array of string",
            "fullTitle": "QueryController QueryController:: ORDER keys should be array of string",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">456</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "e46f6db8-26ed-457f-bd7d-4316cb034740",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER direction should be UP or DOWN",
            "fullTitle": "QueryController QueryController:: ORDER direction should be UP or DOWN",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"asdf\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">'courses_id'</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "f5585648-57b0-4786-bffd-3ec3d6997327",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should not have duplicate key",
            "fullTitle": "QueryController QueryController:: APPLY should not have duplicate key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "c97e8bbe-d9d4-455a-af53-12aa8e49a1a6",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should not have duplicate key",
            "fullTitle": "QueryController QueryController:: APPLY should not have duplicate key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "3f2b704b-5bfe-480c-929b-7172a879eaf8",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should be present if non-underscore key in GET",
            "fullTitle": "QueryController QueryController:: APPLY should be present if non-underscore key in GET",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "3ff6dd8c-6a09-4d0f-a3d2-d670b2c9ca4f",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should be present if GROUP is present",
            "fullTitle": "QueryController QueryController:: APPLY should be present if GROUP is present",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "662eca6d-8d4d-48ed-b4b7-567bc8fe9298",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::APPLY should not be present without GROUP",
            "fullTitle": "QueryController QueryController::APPLY should not be present without GROUP",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "bbb93e9c-ee6c-4fae-b3b5-9c331b2deb7e",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: each object in APPLY must have exactly one key",
            "fullTitle": "QueryController QueryController:: each object in APPLY must have exactly one key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"coursesdept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> }, <span class=\"hljs-string\">\"courseBlah\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_id\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "00c3a5f1-d730-4b77-8241-8f9a3543623d",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: each object in APPLY must have exactly one operation",
            "fullTitle": "QueryController QueryController:: each object in APPLY must have exactly one operation",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span>, <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_audit\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "91a1e600-a515-476d-a3a9-ec2b8d03f28c",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: cannot apply MAX to string column",
            "fullTitle": "QueryController QueryController:: cannot apply MAX to string column",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_instructor\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "dc7c3be0-8947-4e6c-bbdd-a763f11019ea",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: cannot apply operation that is not MAX/MIN/AVG/COUNT",
            "fullTitle": "QueryController QueryController:: cannot apply operation that is not MAX/MIN/AVG/COUNT",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"LOL\"</span>: <span class=\"hljs-string\">\"courses_uuid\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "3fa1e0bd-58ce-4d3e-9ca5-66f1d14b818a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: WHERE clause must reference columns in dataset",
            "fullTitle": "QueryController QueryController:: WHERE clause must reference columns in dataset",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"abcde\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "ec8d9e53-f822-4730-84e1-4a51ee0ff353",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: when dataset missing, should return 424 with list of missing dataset",
            "fullTitle": "QueryController QueryController:: when dataset missing, should return 424 with list of missing dataset",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default({ <span class=\"hljs-string\">'test'</span>: [] });<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-literal\">undefined</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    result = controller.query(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'QueryController::query() should not throw error'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.expect(result).to.deep.equal({ missing: [<span class=\"hljs-string\">'courses'</span>] });",
            "isRoot": false,
            "uuid": "ad1c25b2-6d33-4024-993a-08a038c341d3",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "/test/QueryControllerSpec.js",
        "uuid": "178888dc-84f3-400b-9cad-22afb41a02b4",
        "fullFile": "/Users/Daniel/Desktop/cpsc310project/test/QueryControllerSpec.js",
        "passes": [
          {
            "title": "Should return a StringFilter parsed object",
            "fullTitle": "QueryController Should return a StringFilter parsed object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">\"cpsc\"</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_dept: <span class=\"hljs-string\">'adhe'</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_dept: <span class=\"hljs-string\">'cpsc'</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_dept: <span class=\"hljs-number\">1234</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for adhe == cpsc'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for cpsc == cpsc'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 1234 == cpsc'</span>);",
            "isRoot": false,
            "uuid": "bb99a935-0dd1-46f5-8273-c7a46ef2e45a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a NumberFilter::GT parsed object",
            "fullTitle": "QueryController Should return a NumberFilter::GT parsed object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 89.99 &gt; 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.00 &gt; 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return false for 90.01 &gt; 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf &gt; 90'</span>);",
            "isRoot": false,
            "uuid": "a22ac46c-2f93-4bd7-9e51-67d833fdda0b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a NumberFilter::EQ parsed object",
            "fullTitle": "QueryController Should return a NumberFilter::EQ parsed object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"EQ\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 89.99 == 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for 90.00 == 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.01 == 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf == 90'</span>);",
            "isRoot": false,
            "uuid": "a2ae8534-1adc-48e7-a639-fb7d05e8c53a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a NumberFilter::LT parsed object",
            "fullTitle": "QueryController Should return a NumberFilter::LT parsed object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"LT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for 89.99 &lt; 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.00 &lt; 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.01 &lt; 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf &lt; 90'</span>);",
            "isRoot": false,
            "uuid": "f7d0aaf2-e385-4dac-8e9c-a8978ac513a9",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a LogicFilter::AND parsed object",
            "fullTitle": "QueryController Should return a LogicFilter::AND parsed object",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = {<br>    <span class=\"hljs-string\">\"AND\"</span>: [<br>        { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } },<br>        { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } }]<br>};<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">70</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">'cpsc'</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">71</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-number\">72</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row5 = { courses_avg: <span class=\"hljs-string\">'asdf'</span>, courses_dept: <span class=\"hljs-string\">\"asdf\"</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and adhe == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 71 &gt; 70 and adhe == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and cpsc == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 71 &gt; 70 and cpsc == cpsc are both true'</span>);<br>chai_1.assert(filter.test(row5) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because asdf &gt; 70 and asdf == cpsc are not both true'</span>);",
            "isRoot": false,
            "uuid": "52405883-5084-4bfa-8d21-72fc4b3804bb",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a StringFilter::OR parsed object",
            "fullTitle": "QueryController Should return a StringFilter::OR parsed object",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = {<br>    <span class=\"hljs-string\">\"OR\"</span>: [<br>        { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } },<br>        { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } }]<br>};<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">70</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">'cpsc'</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">71</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-number\">72</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row5 = { courses_avg: <span class=\"hljs-string\">'asdf'</span>, courses_dept: <span class=\"hljs-string\">\"asdf\"</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and adhe == cpsc are both false'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 71 &gt; 70 and adhe == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 58 &gt; 70 and cpsc == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 72 &gt; 70 and cpsc == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row5) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because asdf &gt; 70 and asdf == cpsc are both false'</span>);",
            "isRoot": false,
            "uuid": "4e8371a9-f370-4e57-912e-043436b0d5b2",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return a NegationFilter parsed object",
            "fullTitle": "QueryController Should return a NegationFilter parsed object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"LT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'child'</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'child'</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for !(89.99 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(90.00 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(90.01 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(asdf &lt; 90)'</span>);",
            "isRoot": false,
            "uuid": "8b8976b3-4099-4375-8521-2a8e23064be0",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error for null WHERE Object",
            "fullTitle": "QueryController Should return error for null WHERE Object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "22238eff-979d-413d-8481-4d0b10bb32e7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error for multiple keys in WHERE",
            "fullTitle": "QueryController Should return error for multiple keys in WHERE",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> }, <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "e8a10c64-ff50-49f7-b160-58231a482cc7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error for unknown key in WHERE",
            "fullTitle": "QueryController Should return error for unknown key in WHERE",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"HOW\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "309c1db6-52ac-4d46-bb54-bbd67d3dfdd7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error for undefined WHERE Object",
            "fullTitle": "QueryController Should return error for undefined WHERE Object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">undefined</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "4060025d-43cf-4ac0-a787-b059d01dbce8",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "LogicFilter should return error if not given array",
            "fullTitle": "QueryController LogicFilter should return error if not given array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">'IS'</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "f151a21a-8cea-4513-8ac9-0585dac73b9c",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "LogicFilter should return error if given empty array",
            "fullTitle": "QueryController LogicFilter should return error if given empty array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "8bbe6302-5465-461f-b900-8b34761ff83b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "LogicFilter should return error for unknown key",
            "fullTitle": "QueryController LogicFilter should return error for unknown key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'XOR'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "9629f325-3be1-4f07-8433-6f6feae0a889",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error if leaf filter has no key-value pairs",
            "fullTitle": "QueryController Should return error if leaf filter has no key-value pairs",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: {} }, { <span class=\"hljs-string\">\"IS\"</span>: {} }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "4fe829fc-4ce6-457b-8b62-47f942014c3c",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "Should return error if LogicFilter.parse() given invalid key",
            "fullTitle": "QueryController Should return error if LogicFilter.parse() given invalid key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } }, { <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"adhe\"</span> } } }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'notValid'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "1f4fa0d8-152c-4ddc-a83f-101dc76b19a1",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for empty key",
            "fullTitle": "QueryController NumberFilter:: Should return error for empty key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"90\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "a02dc88b-8427-4452-b56e-f8b240fdfed7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for undefined Object",
            "fullTitle": "QueryController NumberFilter:: Should return error for undefined Object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "7ea347f5-9e36-42f4-9017-dda107e11e00",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for NaN",
            "fullTitle": "QueryController NumberFilter:: Should return error for NaN",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"abc\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "9412a86f-96f5-46bf-816e-7dd303e44649",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for having more than one key",
            "fullTitle": "QueryController NumberFilter:: Should return error for having more than one key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span>, <span class=\"hljs-string\">\"courses_audit\"</span>: <span class=\"hljs-number\">10</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "de049f37-e9a0-4fdb-8004-521e567d1314",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for undefined value",
            "fullTitle": "QueryController NumberFilter:: Should return error for undefined value",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-literal\">undefined</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "ed5b839c-9243-45c3-8311-c126b24e45d6",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NumberFilter:: Should return error for unknown key",
            "fullTitle": "QueryController NumberFilter:: Should return error for unknown key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'unknownKey'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "6095c84c-84d7-4236-b4d8-7adcedb2239b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "StringFilter:: Should return error for undefined Object",
            "fullTitle": "QueryController StringFilter:: Should return error for undefined Object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "daff2bae-d327-4d88-bd82-00906c4c449c",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "StringFilter:: Should return error for more than one key",
            "fullTitle": "QueryController StringFilter:: Should return error for more than one key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span>, <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"90\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'IS'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "c2e1ffdd-c7ca-4861-b16d-d51d93f8a920",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "StringFilter:: Should return error if no key-value pair given",
            "fullTitle": "QueryController StringFilter:: Should return error if no key-value pair given",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = {};<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'IS'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "0b16cba1-c949-4371-86ec-f7b60fff7027",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "StringFilter:: Should return error for unknown key",
            "fullTitle": "QueryController StringFilter:: Should return error for unknown key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_key\"</span>: <span class=\"hljs-string\">\"\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'NO'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "deae8791-a6c9-4475-b40e-54b70bdc1ff5",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NegationFilter:: Should return error for null",
            "fullTitle": "QueryController NegationFilter:: Should return error for null",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NegationFilter.parse(<span class=\"hljs-string\">'NOT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NegationFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NegationFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "d9c5715d-1540-4230-9df5-cfad6fd17b33",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "NegationFilter:: Should return error for unknown key",
            "fullTitle": "QueryController NegationFilter:: Should return error for unknown key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NegationFilter.parse(<span class=\"hljs-string\">'WHO'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NegationFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NegationFilter.parse() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "cf962142-eb17-4233-81b9-f4e4206d20b1",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::query.GET should be an array of string",
            "fullTitle": "QueryController QueryController::query.GET should be an array of string",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">99</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: <span class=\"hljs-string\">'notArray'</span>,<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "11808ad5-1436-4bb3-8bd8-83c2dea91ff7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::query.ORDER should be string or object and have key(s) in GET",
            "fullTitle": "QueryController QueryController::query.ORDER should be string or object and have key(s) in GET",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"ORDER\"</span>: <span class=\"hljs-string\">'courses_audit'</span>,<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"notInGET\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: <span class=\"hljs-number\">98</span>,<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "09276a18-2068-4942-95dc-3686b6deb9cf",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP should be array not object",
            "fullTitle": "QueryController QueryController::GROUP should be array not object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_dept\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: { <span class=\"hljs-string\">'GROUP'</span>: <span class=\"hljs-number\">768</span> },<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "4672c951-3008-4fc5-92f1-49312be74fb7",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP array should not be empty",
            "fullTitle": "QueryController QueryController::GROUP array should not be empty",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "e58310e4-e8ce-4dd0-9764-687e03f0aa6d",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP should be array of string not array of object",
            "fullTitle": "QueryController QueryController::GROUP should be array of string not array of object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [{ <span class=\"hljs-string\">\"okay\"</span>: <span class=\"hljs-number\">789</span> }],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "e5370e40-76ea-425d-b82b-7b7ba42e456a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: GROUP should be array of string not array of number",
            "fullTitle": "QueryController QueryController:: GROUP should be array of string not array of number",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">77</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "912c5186-247e-4cf4-b6fd-40e585f81e2b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GET keys should be in GROUP or APPLY",
            "fullTitle": "QueryController QueryController::GET keys should be in GROUP or APPLY",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_audit\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "41097701-5364-4823-9a1d-77d19a3d19bf",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::APPLY should be array not object",
            "fullTitle": "QueryController QueryController::APPLY should be array not object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: {},<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "92b940c9-d905-4b3f-8127-16906eb8bc64",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should be array not number",
            "fullTitle": "QueryController QueryController:: APPLY should be array not number",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: <span class=\"hljs-number\">76</span>,<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "d849738f-fcc2-4462-a19e-33594bccc286",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::APPLY should be array of object not array of string",
            "fullTitle": "QueryController QueryController::APPLY should be array of object not array of string",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [<span class=\"hljs-string\">'notObject'</span>],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "0631b55a-eb25-41a2-8d61-9088e532df1b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should be array of object not array of number",
            "fullTitle": "QueryController QueryController:: APPLY should be array of object not array of number",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [<span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">88</span>],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "c2c82421-a56f-4ec8-b786-f18f1170364b",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP and APPLY should be present if extra columns provided in GET",
            "fullTitle": "QueryController QueryController::GROUP and APPLY should be present if extra columns provided in GET",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "6da8d828-d5ff-4b4d-9315-38c6a5cd26aa",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::APPLY should be present if GROUP is present",
            "fullTitle": "QueryController QueryController::APPLY should be present if GROUP is present",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "b40a4d28-d7fb-480b-a0ba-159f69b110d5",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::GROUP should be present if APPLY is present",
            "fullTitle": "QueryController QueryController::GROUP should be present if APPLY is present",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "d4b53ee8-c933-43d0-aabe-c0dedbe90511",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: isValid expected to be false when null",
            "fullTitle": "QueryController QueryController:: isValid expected to be false when null",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = <span class=\"hljs-literal\">null</span>;<br>chai_1.expect(QueryController_1.default.isValid(query)).to.be.false;",
            "isRoot": false,
            "uuid": "0f345725-4a72-439d-8e27-ba7888107f0d",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: isValid expected to be true when not null",
            "fullTitle": "QueryController QueryController:: isValid expected to be true when not null",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"notInGET\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br>chai_1.expect(QueryController_1.default.isValid(query)).to.be.true;",
            "isRoot": false,
            "uuid": "3d70edca-5fb5-4dff-9e60-3654b101dab6",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER keys should be array",
            "fullTitle": "QueryController QueryController:: ORDER keys should be array",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: <span class=\"hljs-string\">\"notInGET\"</span> },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "fb79a594-5165-4151-a06c-8983d7c75af9",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER keys array should not be empty",
            "fullTitle": "QueryController QueryController:: ORDER keys array should not be empty",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "817ed5d7-651e-4a5f-8ae5-19c46200399d",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER keys should be in GET",
            "fullTitle": "QueryController QueryController:: ORDER keys should be in GET",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">'asdf'</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "8dbb7773-a63b-4d23-8c54-c461321e6b2a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER keys should be array of string",
            "fullTitle": "QueryController QueryController:: ORDER keys should be array of string",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">456</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "e46f6db8-26ed-457f-bd7d-4316cb034740",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: ORDER direction should be UP or DOWN",
            "fullTitle": "QueryController QueryController:: ORDER direction should be UP or DOWN",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"asdf\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">'courses_id'</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "f5585648-57b0-4786-bffd-3ec3d6997327",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should not have duplicate key",
            "fullTitle": "QueryController QueryController:: APPLY should not have duplicate key",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "c97e8bbe-d9d4-455a-af53-12aa8e49a1a6",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should not have duplicate key",
            "fullTitle": "QueryController QueryController:: APPLY should not have duplicate key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "3f2b704b-5bfe-480c-929b-7172a879eaf8",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should be present if non-underscore key in GET",
            "fullTitle": "QueryController QueryController:: APPLY should be present if non-underscore key in GET",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "3ff6dd8c-6a09-4d0f-a3d2-d670b2c9ca4f",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: APPLY should be present if GROUP is present",
            "fullTitle": "QueryController QueryController:: APPLY should be present if GROUP is present",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "662eca6d-8d4d-48ed-b4b7-567bc8fe9298",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController::APPLY should not be present without GROUP",
            "fullTitle": "QueryController QueryController::APPLY should not be present without GROUP",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "bbb93e9c-ee6c-4fae-b3b5-9c331b2deb7e",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: each object in APPLY must have exactly one key",
            "fullTitle": "QueryController QueryController:: each object in APPLY must have exactly one key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"coursesdept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> }, <span class=\"hljs-string\">\"courseBlah\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_id\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "00c3a5f1-d730-4b77-8241-8f9a3543623d",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: each object in APPLY must have exactly one operation",
            "fullTitle": "QueryController QueryController:: each object in APPLY must have exactly one operation",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span>, <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_audit\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "91a1e600-a515-476d-a3a9-ec2b8d03f28c",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: cannot apply MAX to string column",
            "fullTitle": "QueryController QueryController:: cannot apply MAX to string column",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_instructor\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "dc7c3be0-8947-4e6c-bbdd-a763f11019ea",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: cannot apply operation that is not MAX/MIN/AVG/COUNT",
            "fullTitle": "QueryController QueryController:: cannot apply operation that is not MAX/MIN/AVG/COUNT",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"LOL\"</span>: <span class=\"hljs-string\">\"courses_uuid\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "3fa1e0bd-58ce-4d3e-9ca5-66f1d14b818a",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: WHERE clause must reference columns in dataset",
            "fullTitle": "QueryController QueryController:: WHERE clause must reference columns in dataset",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"abcde\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
            "isRoot": false,
            "uuid": "ec8d9e53-f822-4730-84e1-4a51ee0ff353",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          },
          {
            "title": "QueryController:: when dataset missing, should return 424 with list of missing dataset",
            "fullTitle": "QueryController QueryController:: when dataset missing, should return 424 with list of missing dataset",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default({ <span class=\"hljs-string\">'test'</span>: [] });<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-literal\">undefined</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    result = controller.query(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'QueryController::query() should not throw error'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.expect(result).to.deep.equal({ missing: [<span class=\"hljs-string\">'courses'</span>] });",
            "isRoot": false,
            "uuid": "ad1c25b2-6d33-4024-993a-08a038c341d3",
            "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 60,
        "totalPasses": 60,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 47
      },
      {
        "title": "Dataset Service",
        "suites": [],
        "tests": [
          {
            "title": "Should not be able to set a valid zip that does not contain a valid dataset",
            "fullTitle": "Dataset Service Should not be able to set a valid zip that does not contain a valid dataset",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> zipContent = <span class=\"hljs-string\">'UEsDBAoAAAAIAAEiJEm/nBg/EQAAAA8AAAALAAAAY29udGVudC5vYmqrVspOrVSyUipLzClNVaoFAFBLAQIUAAoAAAAIAAEiJEm/nBg/EQAAAA8AAAALAAAAAAAAAAAAAAAAAAAAAABjb250ZW50Lm9ialBLBQYAAAAAAQABADkAAAA6AAAAAAA='</span>;<br><span class=\"hljs-keyword\">return</span> insightFacade.addDataset(<span class=\"hljs-string\">'courses'</span>, zipContent).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should get an error but got success: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expect 400 error'</span>);<br>    chai_1.assert(<span class=\"hljs-keyword\">typeof</span> result.body[<span class=\"hljs-string\">'error'</span>] == <span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'expect error field in body with error message string'</span>);<br>});",
            "isRoot": false,
            "uuid": "68238540-29da-46e4-bd64-a041a13b8e00",
            "parentUUID": "b3e8c3e9-a323-45c2-be34-c756022c6cb6",
            "skipped": false
          },
          {
            "title": "Should not be able to set a dataset that is not a zip file",
            "fullTitle": "Dataset Service Should not be able to set a dataset that is not a zip file",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> zipContent = <span class=\"hljs-string\">'adfadsfad'</span>;<br><span class=\"hljs-keyword\">return</span> insightFacade.addDataset(<span class=\"hljs-string\">'courses'</span>, zipContent).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should get an error but got success: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expect 400 error'</span>);<br>    chai_1.assert(<span class=\"hljs-keyword\">typeof</span> result.body[<span class=\"hljs-string\">'error'</span>] == <span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'expect error field in body with error message string'</span>);<br>});",
            "isRoot": false,
            "uuid": "2470737c-f0b4-45d6-8d1c-c9e723278fd4",
            "parentUUID": "b3e8c3e9-a323-45c2-be34-c756022c6cb6",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "/test/ServerDatasetSpec.js",
        "uuid": "b3e8c3e9-a323-45c2-be34-c756022c6cb6",
        "fullFile": "/Users/Daniel/Desktop/cpsc310project/test/ServerDatasetSpec.js",
        "passes": [
          {
            "title": "Should not be able to set a valid zip that does not contain a valid dataset",
            "fullTitle": "Dataset Service Should not be able to set a valid zip that does not contain a valid dataset",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> zipContent = <span class=\"hljs-string\">'UEsDBAoAAAAIAAEiJEm/nBg/EQAAAA8AAAALAAAAY29udGVudC5vYmqrVspOrVSyUipLzClNVaoFAFBLAQIUAAoAAAAIAAEiJEm/nBg/EQAAAA8AAAALAAAAAAAAAAAAAAAAAAAAAABjb250ZW50Lm9ialBLBQYAAAAAAQABADkAAAA6AAAAAAA='</span>;<br><span class=\"hljs-keyword\">return</span> insightFacade.addDataset(<span class=\"hljs-string\">'courses'</span>, zipContent).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should get an error but got success: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expect 400 error'</span>);<br>    chai_1.assert(<span class=\"hljs-keyword\">typeof</span> result.body[<span class=\"hljs-string\">'error'</span>] == <span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'expect error field in body with error message string'</span>);<br>});",
            "isRoot": false,
            "uuid": "68238540-29da-46e4-bd64-a041a13b8e00",
            "parentUUID": "b3e8c3e9-a323-45c2-be34-c756022c6cb6",
            "skipped": false
          },
          {
            "title": "Should not be able to set a dataset that is not a zip file",
            "fullTitle": "Dataset Service Should not be able to set a dataset that is not a zip file",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> zipContent = <span class=\"hljs-string\">'adfadsfad'</span>;<br><span class=\"hljs-keyword\">return</span> insightFacade.addDataset(<span class=\"hljs-string\">'courses'</span>, zipContent).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should get an error but got success: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expect 400 error'</span>);<br>    chai_1.assert(<span class=\"hljs-keyword\">typeof</span> result.body[<span class=\"hljs-string\">'error'</span>] == <span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'expect error field in body with error message string'</span>);<br>});",
            "isRoot": false,
            "uuid": "2470737c-f0b4-45d6-8d1c-c9e723278fd4",
            "parentUUID": "b3e8c3e9-a323-45c2-be34-c756022c6cb6",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4
      },
      {
        "title": "Query Service",
        "suites": [],
        "tests": [
          {
            "title": "Should be able to find sections with an average > 90",
            "fullTitle": "Query Service Should be able to find sections with an average > 90",
            "timedOut": false,
            "duration": 100,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "ac8f3d82-56be-4833-9cef-cb86df4ecdfb",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department",
            "fullTitle": "Query Service Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department",
            "timedOut": false,
            "duration": 96,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "71561b09-3fc2-4c7f-af9c-5391e3dddde5",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Should be able to find sections of CPSC 310",
            "fullTitle": "Query Service Should be able to find sections of CPSC 310",
            "timedOut": false,
            "duration": 37,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "332aa91e-2d84-4557-8556-202b3169ef3a",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor",
            "fullTitle": "Query Service Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor",
            "timedOut": false,
            "duration": 59,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "87c01ec7-90af-4538-b337-ca48c931e023",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Find the average for all cpsc courses",
            "fullTitle": "Query Service Find the average for all cpsc courses",
            "timedOut": false,
            "duration": 51,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "7f3b7e38-adff-4294-a9db-785c12600c01",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Find the average for all courses in the university, sort up (hardest to easiest)",
            "fullTitle": "Query Service Find the average for all courses in the university, sort up (hardest to easiest)",
            "timedOut": false,
            "duration": 437,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "7adefd5d-f2b2-4542-83e6-45cae115b879",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Find the courses offered the most times",
            "fullTitle": "Query Service Find the courses offered the most times",
            "timedOut": false,
            "duration": 469,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "78118a83-81e6-46af-bec8-c354da18ffde",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Should not be able to submit an empty query",
            "fullTitle": "Query Service Should not be able to submit an empty query",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "fb9fbcd6-d476-468f-80b8-84dabee7f963",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "All underscore keys in GET must be in GROUP",
            "fullTitle": "Query Service All underscore keys in GET must be in GROUP",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_uuid\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "34402916-a012-47d0-9828-1edd9e42ef36",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "All extra keys in GET must be in APPLY",
            "fullTitle": "Query Service All extra keys in GET must be in APPLY",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"abcde\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "4e2e627c-c962-4094-9480-0ab9c5b3e3d3",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "APPLY rules must be unique per extra key",
            "fullTitle": "Query Service APPLY rules must be unique per extra key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "6eb0df47-ff65-4645-af34-21e60ce48766",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "if key is in GROUP key must not be in APPLY",
            "fullTitle": "Query Service if key is in GROUP key must not be in APPLY",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_id\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "94fdfeb5-d4a9-415f-859b-0a2e317d6da4",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "if key is in APPLY, key must not be in GROUP",
            "fullTitle": "Query Service if key is in APPLY, key must not be in GROUP",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_avg\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "a887ad59-7eb6-45aa-938d-ac59096e7e33",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "no duplicate key in GROUP",
            "fullTitle": "Query Service no duplicate key in GROUP",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "289b7904-eb25-4f49-8c02-d3fd70df351c",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "GROUP key not in GET is allowed",
            "fullTitle": "Query Service GROUP key not in GET is allowed",
            "timedOut": false,
            "duration": 242,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: {},<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_dept\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">'expects 200 success'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not fail'</span>);<br>});",
            "isRoot": false,
            "uuid": "e594cc50-5f70-4ea3-a211-811fa8be3050",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "/test/ServerQuerySpec.js",
        "uuid": "31447b11-0fce-4c8d-8158-39158cc71f8d",
        "fullFile": "/Users/Daniel/Desktop/cpsc310project/test/ServerQuerySpec.js",
        "passes": [
          {
            "title": "Should be able to find sections with an average > 90",
            "fullTitle": "Query Service Should be able to find sections with an average > 90",
            "timedOut": false,
            "duration": 100,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "ac8f3d82-56be-4833-9cef-cb86df4ecdfb",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department",
            "fullTitle": "Query Service Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department",
            "timedOut": false,
            "duration": 96,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "71561b09-3fc2-4c7f-af9c-5391e3dddde5",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Should be able to find sections of CPSC 310",
            "fullTitle": "Query Service Should be able to find sections of CPSC 310",
            "timedOut": false,
            "duration": 37,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "332aa91e-2d84-4557-8556-202b3169ef3a",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor",
            "fullTitle": "Query Service Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor",
            "timedOut": false,
            "duration": 59,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "87c01ec7-90af-4538-b337-ca48c931e023",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Find the average for all cpsc courses",
            "fullTitle": "Query Service Find the average for all cpsc courses",
            "timedOut": false,
            "duration": 51,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "7f3b7e38-adff-4294-a9db-785c12600c01",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Find the average for all courses in the university, sort up (hardest to easiest)",
            "fullTitle": "Query Service Find the average for all courses in the university, sort up (hardest to easiest)",
            "timedOut": false,
            "duration": 437,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "7adefd5d-f2b2-4542-83e6-45cae115b879",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Find the courses offered the most times",
            "fullTitle": "Query Service Find the courses offered the most times",
            "timedOut": false,
            "duration": 469,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
            "isRoot": false,
            "uuid": "78118a83-81e6-46af-bec8-c354da18ffde",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "Should not be able to submit an empty query",
            "fullTitle": "Query Service Should not be able to submit an empty query",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "fb9fbcd6-d476-468f-80b8-84dabee7f963",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "All underscore keys in GET must be in GROUP",
            "fullTitle": "Query Service All underscore keys in GET must be in GROUP",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_uuid\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "34402916-a012-47d0-9828-1edd9e42ef36",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "All extra keys in GET must be in APPLY",
            "fullTitle": "Query Service All extra keys in GET must be in APPLY",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"abcde\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "4e2e627c-c962-4094-9480-0ab9c5b3e3d3",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "APPLY rules must be unique per extra key",
            "fullTitle": "Query Service APPLY rules must be unique per extra key",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "6eb0df47-ff65-4645-af34-21e60ce48766",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "if key is in GROUP key must not be in APPLY",
            "fullTitle": "Query Service if key is in GROUP key must not be in APPLY",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_id\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "94fdfeb5-d4a9-415f-859b-0a2e317d6da4",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "if key is in APPLY, key must not be in GROUP",
            "fullTitle": "Query Service if key is in APPLY, key must not be in GROUP",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_avg\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "a887ad59-7eb6-45aa-938d-ac59096e7e33",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "no duplicate key in GROUP",
            "fullTitle": "Query Service no duplicate key in GROUP",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
            "isRoot": false,
            "uuid": "289b7904-eb25-4f49-8c02-d3fd70df351c",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          },
          {
            "title": "GROUP key not in GET is allowed",
            "fullTitle": "Query Service GROUP key not in GET is allowed",
            "timedOut": false,
            "duration": 242,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: {},<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_dept\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">'expects 200 success'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not fail'</span>);<br>});",
            "isRoot": false,
            "uuid": "e594cc50-5f70-4ea3-a211-811fa8be3050",
            "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 15,
        "totalPasses": 15,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1503
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 10000,
    "uuid": "ce8a2d4a-509e-4230-a1fc-5fea8805c089",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Should throw error on zip without any valid data file under courses",
      "fullTitle": "DatasetController Should throw error on zip without any valid data file under courses",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Util_1.default.test(<span class=\"hljs-string\">'Creating dataset'</span>);<br><span class=\"hljs-keyword\">var</span> content = { key: <span class=\"hljs-string\">'value'</span> };<br><span class=\"hljs-keyword\">var</span> zip = <span class=\"hljs-keyword\">new</span> JSZip();<br>zip.file(<span class=\"hljs-string\">'content.obj'</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(content));<br><span class=\"hljs-keyword\">var</span> opts = {<br>    compression: <span class=\"hljs-string\">'deflate'</span>, compressionOptions: { level: <span class=\"hljs-number\">2</span> }, type: <span class=\"hljs-string\">'base64'</span><br>};<br><span class=\"hljs-keyword\">return</span> zip.generateAsync(opts).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    Util_1.default.test(<span class=\"hljs-string\">'Dataset created '</span>);<br>    Util_1.default.test(data);<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>    controller.process(<span class=\"hljs-string\">'courses'</span>, data).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>        chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"should throw error on zip without any valid data file under courses/\"</span>);<br>    }).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>        <span class=\"hljs-keyword\">throw</span> err;<br>    });<br>}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"should throw error on zip without any valid data file under courses/\"</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "b313a774-c455-4c2c-838e-330b43c34d3b",
      "parentUUID": "05c351f7-0891-47fc-bfdf-fac39058d416",
      "skipped": false
    },
    {
      "title": "Should be able to process a rooms zip",
      "fullTitle": "DatasetController Should be able to process a rooms zip",
      "timedOut": false,
      "duration": 340,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> expectedObj = [<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'1012'</span>, rooms_name: <span class=\"hljs-string\">'ESB_1012'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">150</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Hybrid Furniture'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-1012'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'1013'</span>, rooms_name: <span class=\"hljs-string\">'ESB_1013'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">350</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-1013'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'2012'</span>, rooms_name: <span class=\"hljs-string\">'ESB_2012'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">80</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-2012'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'101'</span>, rooms_name: <span class=\"hljs-string\">'DMP_101'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">40</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-101'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'110'</span>, rooms_name: <span class=\"hljs-string\">'DMP_110'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">120</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-110'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'201'</span>, rooms_name: <span class=\"hljs-string\">'DMP_201'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">40</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-201'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'301'</span>, rooms_name: <span class=\"hljs-string\">'DMP_301'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">80</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-301'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'310'</span>, rooms_name: <span class=\"hljs-string\">'DMP_310'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">160</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-310'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'100'</span>, rooms_name: <span class=\"hljs-string\">'MATH_100'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">224</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-100'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'102'</span>, rooms_name: <span class=\"hljs-string\">'MATH_102'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">60</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-102'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'104'</span>, rooms_name: <span class=\"hljs-string\">'MATH_104'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">48</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-104'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'105'</span>, rooms_name: <span class=\"hljs-string\">'MATH_105'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-105'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'202'</span>, rooms_name: <span class=\"hljs-string\">'MATH_202'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-202'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'203'</span>, rooms_name: <span class=\"hljs-string\">'MATH_203'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">48</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-203'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'204'</span>, rooms_name: <span class=\"hljs-string\">'MATH_204'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-204'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'225'</span>, rooms_name: <span class=\"hljs-string\">'MATH_225'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">25</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-225'</span> },<br>];<br>Util_1.default.test(<span class=\"hljs-string\">\"Reading test zip file\"</span>);<br><span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-string\">'rooms'</span>;<br><span class=\"hljs-keyword\">var</span> content = fs.readFileSync(<span class=\"hljs-string\">\"./rooms-small.zip\"</span>).toString(<span class=\"hljs-string\">'base64'</span>);<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>Util_1.default.test(<span class=\"hljs-string\">\"Finished reading test zip file, parsing zip...\"</span>);<br><span class=\"hljs-keyword\">return</span> controller.process(id, content).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resCode</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> controller.getDatasets().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">datasets</span>) </span>{<br>        chai_1.expect(datasets[id]).to.deep.equal(expectedObj);<br>    });<br>});",
      "err": {
        "name": "AssertionError",
        "message": "expected [ Array(16) ] to deeply equal [ Array(16) ]",
        "stack": "AssertionError: expected [ Array(16) ] to deeply equal [ Array(16) ]<br>    at Assertion.assertEqual (node_modules/chai/lib/chai/core/assertions.js:485:19)<br>    at Assertion.ctx.(anonymous function) [as equal] (node_modules/chai/lib/chai/utils/addMethod.js:41:25)<br>    at test/DatasetControllerSpec.js:141:53<br>    at process._tickCallback (internal/process/next_tick.js:103:7)"
      },
      "isRoot": false,
      "uuid": "39ea7522-58ba-47cd-9fc5-b05e478f37ca",
      "parentUUID": "05c351f7-0891-47fc-bfdf-fac39058d416",
      "skipped": false
    },
    {
      "title": "removeDataset::Should delete datasets",
      "fullTitle": "InsightFacade removeDataset::Should delete datasets",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> datasetController = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br><span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>Util_1.default.test(<span class=\"hljs-string\">'InsightFacade.removeDataset tests'</span>);<br>chai_1.expect(insightFacade.removeDataset(<span class=\"hljs-string\">'courses'</span>)) != <span class=\"hljs-literal\">null</span>;",
      "isRoot": false,
      "uuid": "3fdd8ba1-e8d6-4d1f-a79c-fc33d8483346",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "addDataset::('InsightFacade::removeDataset(..) - ERROR: ' + err.message",
      "fullTitle": "InsightFacade addDataset::('InsightFacade::removeDataset(..) - ERROR: ' + err.message",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> datasetController = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.addDataset(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "63a309e9-aff4-421b-8138-20eba1cb4ce4",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "performQuery::('InsightFacade::performQuery(..) - ERROR: ' + err.message",
      "fullTitle": "InsightFacade performQuery::('InsightFacade::performQuery(..) - ERROR: ' + err.message",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"class_id\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "d9338205-a32f-412c-a526-ed22093a02f2",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "PerformQuery()::Should reject with 400 error",
      "fullTitle": "InsightFacade PerformQuery()::Should reject with 400 error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.removeDataset(<span class=\"hljs-string\">'class'</span>);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "f98d83fe-ec21-41fc-8ddb-a69acffba734",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "deleteDataset()::Should reject with 400 error",
      "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'errorCase\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "61a507d1-adce-4032-815f-2af7b3479620",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "deleteDataset()::Should reject with 400 error",
      "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'courses_nonsense\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_nothere\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "ba88fa39-08e3-47c4-9689-5f44b3732fd8",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "deleteDataset()::Should reject with 400 error",
      "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'courses_nonsense\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_id\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "c32a32d3-36bf-48b4-95e2-f1ecf1c663f6",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "Should return a StringFilter parsed object",
      "fullTitle": "QueryController Should return a StringFilter parsed object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">\"cpsc\"</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_dept: <span class=\"hljs-string\">'adhe'</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_dept: <span class=\"hljs-string\">'cpsc'</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_dept: <span class=\"hljs-number\">1234</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for adhe == cpsc'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for cpsc == cpsc'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 1234 == cpsc'</span>);",
      "isRoot": false,
      "uuid": "d3eabc85-ee32-4de2-a9da-0b41c5e7c992",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a NumberFilter::GT parsed object",
      "fullTitle": "QueryController Should return a NumberFilter::GT parsed object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 89.99 &gt; 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.00 &gt; 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return false for 90.01 &gt; 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf &gt; 90'</span>);",
      "isRoot": false,
      "uuid": "e278ce13-cb36-4439-9dfd-e1eb0367c75e",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a NumberFilter::EQ parsed object",
      "fullTitle": "QueryController Should return a NumberFilter::EQ parsed object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"EQ\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 89.99 == 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for 90.00 == 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.01 == 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf == 90'</span>);",
      "isRoot": false,
      "uuid": "0374cb54-6675-43cd-a835-79b94478cf16",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a NumberFilter::LT parsed object",
      "fullTitle": "QueryController Should return a NumberFilter::LT parsed object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"LT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for 89.99 &lt; 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.00 &lt; 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.01 &lt; 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf &lt; 90'</span>);",
      "isRoot": false,
      "uuid": "eb10a79f-9750-4710-8c30-1989f6fd5e1f",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a LogicFilter::AND parsed object",
      "fullTitle": "QueryController Should return a LogicFilter::AND parsed object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = {<br>    <span class=\"hljs-string\">\"AND\"</span>: [<br>        { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } },<br>        { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } }]<br>};<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">70</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">'cpsc'</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">71</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-number\">72</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row5 = { courses_avg: <span class=\"hljs-string\">'asdf'</span>, courses_dept: <span class=\"hljs-string\">\"asdf\"</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and adhe == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 71 &gt; 70 and adhe == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and cpsc == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 71 &gt; 70 and cpsc == cpsc are both true'</span>);<br>chai_1.assert(filter.test(row5) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because asdf &gt; 70 and asdf == cpsc are not both true'</span>);",
      "isRoot": false,
      "uuid": "fabd571b-0c39-43a9-bf61-048c35dac9da",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a StringFilter::OR parsed object",
      "fullTitle": "QueryController Should return a StringFilter::OR parsed object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = {<br>    <span class=\"hljs-string\">\"OR\"</span>: [<br>        { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } },<br>        { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } }]<br>};<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">70</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">'cpsc'</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">71</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-number\">72</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row5 = { courses_avg: <span class=\"hljs-string\">'asdf'</span>, courses_dept: <span class=\"hljs-string\">\"asdf\"</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and adhe == cpsc are both false'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 71 &gt; 70 and adhe == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 58 &gt; 70 and cpsc == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 72 &gt; 70 and cpsc == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row5) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because asdf &gt; 70 and asdf == cpsc are both false'</span>);",
      "isRoot": false,
      "uuid": "8c50719a-70cd-4e73-acd9-6cbc50cd2fff",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a NegationFilter parsed object",
      "fullTitle": "QueryController Should return a NegationFilter parsed object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"LT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'child'</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'child'</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for !(89.99 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(90.00 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(90.01 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(asdf &lt; 90)'</span>);",
      "isRoot": false,
      "uuid": "87313dfe-629b-4209-b2d4-95eb0225f9e5",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error for null WHERE Object",
      "fullTitle": "QueryController Should return error for null WHERE Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "873481e9-56ea-4463-acbf-ab605d35d5cd",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error for multiple keys in WHERE",
      "fullTitle": "QueryController Should return error for multiple keys in WHERE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> }, <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "a1f5fb45-24c6-444b-a801-cba990db482d",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error for unknown key in WHERE",
      "fullTitle": "QueryController Should return error for unknown key in WHERE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"HOW\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "1714ec6b-c0cf-4c19-97a5-4c00a71c0c39",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error for undefined WHERE Object",
      "fullTitle": "QueryController Should return error for undefined WHERE Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">undefined</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "ae907916-83b3-440e-91a2-0bd3800dfd7e",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "LogicFilter should return error if not given array",
      "fullTitle": "QueryController LogicFilter should return error if not given array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">'IS'</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "27475e73-d738-475d-b0a0-9e2a4f76df48",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "LogicFilter should return error if given empty array",
      "fullTitle": "QueryController LogicFilter should return error if given empty array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "c78617f7-35ca-489c-95ce-241a9136f6c1",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "LogicFilter should return error for unknown key",
      "fullTitle": "QueryController LogicFilter should return error for unknown key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'XOR'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "e0f320cb-cde5-4c90-a482-13c423f58ac8",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error if leaf filter has no key-value pairs",
      "fullTitle": "QueryController Should return error if leaf filter has no key-value pairs",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: {} }, { <span class=\"hljs-string\">\"IS\"</span>: {} }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "91ee2637-4706-4111-a45b-26ff14c0d914",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error if LogicFilter.parse() given invalid key",
      "fullTitle": "QueryController Should return error if LogicFilter.parse() given invalid key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } }, { <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"adhe\"</span> } } }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'notValid'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f87db43a-0d60-4bf8-8bc0-a5aa1f4134ab",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for empty key",
      "fullTitle": "QueryController NumberFilter:: Should return error for empty key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"90\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "9710956b-2370-4f94-b12a-b73a733ed084",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for undefined Object",
      "fullTitle": "QueryController NumberFilter:: Should return error for undefined Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "d417c05d-dc17-44db-a67e-3365ed2bb2ec",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for NaN",
      "fullTitle": "QueryController NumberFilter:: Should return error for NaN",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"abc\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "95e71fa8-807e-433e-b31f-a9d11268a1ff",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for having more than one key",
      "fullTitle": "QueryController NumberFilter:: Should return error for having more than one key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span>, <span class=\"hljs-string\">\"courses_audit\"</span>: <span class=\"hljs-number\">10</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "c3e7fe44-305a-439d-a3c1-77b6ee333168",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for undefined value",
      "fullTitle": "QueryController NumberFilter:: Should return error for undefined value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-literal\">undefined</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f1fd6872-81ab-43f9-a2cc-f65b6e1dbe54",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for unknown key",
      "fullTitle": "QueryController NumberFilter:: Should return error for unknown key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'unknownKey'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "c32b2f6f-73b8-4627-9332-ca08904de0d5",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "StringFilter:: Should return error for undefined Object",
      "fullTitle": "QueryController StringFilter:: Should return error for undefined Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "6a14ed98-339c-4443-a576-fe8c1d729da7",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "StringFilter:: Should return error for more than one key",
      "fullTitle": "QueryController StringFilter:: Should return error for more than one key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span>, <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"90\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'IS'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "0dce3b47-35ad-4729-af9b-6c61a0567d55",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "StringFilter:: Should return error if no key-value pair given",
      "fullTitle": "QueryController StringFilter:: Should return error if no key-value pair given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = {};<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'IS'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "174a4c53-6412-4e53-a4c5-c00de9dcd48b",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "StringFilter:: Should return error for unknown key",
      "fullTitle": "QueryController StringFilter:: Should return error for unknown key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_key\"</span>: <span class=\"hljs-string\">\"\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'NO'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "b98d82d5-e7ea-4a9f-8e3f-59e878fec678",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NegationFilter:: Should return error for null",
      "fullTitle": "QueryController NegationFilter:: Should return error for null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NegationFilter.parse(<span class=\"hljs-string\">'NOT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NegationFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NegationFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "bd27ec2c-73c5-4644-ad97-fa09a70a6aa8",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NegationFilter:: Should return error for unknown key",
      "fullTitle": "QueryController NegationFilter:: Should return error for unknown key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NegationFilter.parse(<span class=\"hljs-string\">'WHO'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NegationFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NegationFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "6b7be38e-c761-4e9c-b755-a56a365d8651",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::query.GET should be an array of string",
      "fullTitle": "QueryController QueryController::query.GET should be an array of string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">99</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: <span class=\"hljs-string\">'notArray'</span>,<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "7fcf57a0-dac7-4326-98fb-e221f2f0dc89",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::query.ORDER should be string or object and have key(s) in GET",
      "fullTitle": "QueryController QueryController::query.ORDER should be string or object and have key(s) in GET",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"ORDER\"</span>: <span class=\"hljs-string\">'courses_audit'</span>,<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"notInGET\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: <span class=\"hljs-number\">98</span>,<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "cd8c9f86-f18d-4765-9e95-615676acbc21",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP should be array not object",
      "fullTitle": "QueryController QueryController::GROUP should be array not object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_dept\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: { <span class=\"hljs-string\">'GROUP'</span>: <span class=\"hljs-number\">768</span> },<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "9a6cf0a2-042b-4f6e-88e4-931d8a111118",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP array should not be empty",
      "fullTitle": "QueryController QueryController::GROUP array should not be empty",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "8a55a133-986e-44b9-ba29-3cfc6178564b",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP should be array of string not array of object",
      "fullTitle": "QueryController QueryController::GROUP should be array of string not array of object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [{ <span class=\"hljs-string\">\"okay\"</span>: <span class=\"hljs-number\">789</span> }],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "97b5aba8-9ad5-47e9-b5cf-643fefc29097",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: GROUP should be array of string not array of number",
      "fullTitle": "QueryController QueryController:: GROUP should be array of string not array of number",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">77</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f8e42093-990e-4c0c-8f76-7d950733834f",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GET keys should be in GROUP or APPLY",
      "fullTitle": "QueryController QueryController::GET keys should be in GROUP or APPLY",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_audit\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "4be034fe-7bcf-4409-abc7-6b98e0a10022",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::APPLY should be array not object",
      "fullTitle": "QueryController QueryController::APPLY should be array not object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: {},<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "6b6894fa-5482-40e2-93c6-874f84305e97",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should be array not number",
      "fullTitle": "QueryController QueryController:: APPLY should be array not number",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: <span class=\"hljs-number\">76</span>,<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "3b5a663d-3c21-4635-ab6e-6a074795a589",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::APPLY should be array of object not array of string",
      "fullTitle": "QueryController QueryController::APPLY should be array of object not array of string",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [<span class=\"hljs-string\">'notObject'</span>],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f3630b3d-53ba-439a-a815-b166a30d2b87",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should be array of object not array of number",
      "fullTitle": "QueryController QueryController:: APPLY should be array of object not array of number",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [<span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">88</span>],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "e4b31472-b446-4eef-b47c-3e3f047cdc57",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP and APPLY should be present if extra columns provided in GET",
      "fullTitle": "QueryController QueryController::GROUP and APPLY should be present if extra columns provided in GET",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "44c868e8-52d5-48d4-a94b-65246838907e",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::APPLY should be present if GROUP is present",
      "fullTitle": "QueryController QueryController::APPLY should be present if GROUP is present",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "a6849398-ac57-48da-972a-6ab4d69987f4",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP should be present if APPLY is present",
      "fullTitle": "QueryController QueryController::GROUP should be present if APPLY is present",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f367e961-3042-49e7-8ffc-f01eb6001293",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: isValid expected to be false when null",
      "fullTitle": "QueryController QueryController:: isValid expected to be false when null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = <span class=\"hljs-literal\">null</span>;<br>chai_1.expect(QueryController_1.default.isValid(query)).to.be.false;",
      "isRoot": false,
      "uuid": "5b60da4e-9f62-4f24-b288-216177c12414",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: isValid expected to be true when not null",
      "fullTitle": "QueryController QueryController:: isValid expected to be true when not null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"notInGET\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br>chai_1.expect(QueryController_1.default.isValid(query)).to.be.true;",
      "isRoot": false,
      "uuid": "d051df9b-b8b3-4f96-9f07-1e18b14f75d2",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER keys should be array",
      "fullTitle": "QueryController QueryController:: ORDER keys should be array",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: <span class=\"hljs-string\">\"notInGET\"</span> },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "c3cb17a7-de37-4cfb-b04d-690a4aaba758",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER keys array should not be empty",
      "fullTitle": "QueryController QueryController:: ORDER keys array should not be empty",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "885a26cd-5591-49e6-a683-98bf7b637141",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER keys should be in GET",
      "fullTitle": "QueryController QueryController:: ORDER keys should be in GET",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">'asdf'</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "33908720-5790-4f7f-9803-0f232831ec2e",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER keys should be array of string",
      "fullTitle": "QueryController QueryController:: ORDER keys should be array of string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">456</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "7d768111-1e8c-4906-a6c8-b1811c53ff58",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER direction should be UP or DOWN",
      "fullTitle": "QueryController QueryController:: ORDER direction should be UP or DOWN",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"asdf\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">'courses_id'</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f6f83f9f-7a7b-4118-8682-178056ee9b8b",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should not have duplicate key",
      "fullTitle": "QueryController QueryController:: APPLY should not have duplicate key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "71a12480-ce06-48f0-981c-58d1a697f17b",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should not have duplicate key",
      "fullTitle": "QueryController QueryController:: APPLY should not have duplicate key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "734daef9-054c-49a2-8622-d04944ff4ac5",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should be present if non-underscore key in GET",
      "fullTitle": "QueryController QueryController:: APPLY should be present if non-underscore key in GET",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "ce3c68d4-6664-4e0d-a6f8-dff706c19fec",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should be present if GROUP is present",
      "fullTitle": "QueryController QueryController:: APPLY should be present if GROUP is present",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "323190b1-63ff-4d39-b238-9f2f6727d116",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::APPLY should not be present without GROUP",
      "fullTitle": "QueryController QueryController::APPLY should not be present without GROUP",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "14ac81b4-5057-44ae-9d99-6a527aeac9d3",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: each object in APPLY must have exactly one key",
      "fullTitle": "QueryController QueryController:: each object in APPLY must have exactly one key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"coursesdept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> }, <span class=\"hljs-string\">\"courseBlah\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_id\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f7e6eacc-dcdc-4717-a86b-3ba88cc93c24",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: each object in APPLY must have exactly one operation",
      "fullTitle": "QueryController QueryController:: each object in APPLY must have exactly one operation",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span>, <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_audit\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "34053591-bc1e-4ca8-b2ce-c6af1076dcea",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: cannot apply MAX to string column",
      "fullTitle": "QueryController QueryController:: cannot apply MAX to string column",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_instructor\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "cfb76945-4925-4006-ba76-a8ce5f7b39b8",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: cannot apply operation that is not MAX/MIN/AVG/COUNT",
      "fullTitle": "QueryController QueryController:: cannot apply operation that is not MAX/MIN/AVG/COUNT",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"LOL\"</span>: <span class=\"hljs-string\">\"courses_uuid\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "58a7ffe0-ba2b-41d4-9ce7-32039c9a8ac4",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: WHERE clause must reference columns in dataset",
      "fullTitle": "QueryController QueryController:: WHERE clause must reference columns in dataset",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"abcde\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "57f724a9-2018-4a25-90a2-16e912ce4bca",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: when dataset missing, should return 424 with list of missing dataset",
      "fullTitle": "QueryController QueryController:: when dataset missing, should return 424 with list of missing dataset",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default({ <span class=\"hljs-string\">'test'</span>: [] });<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-literal\">undefined</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    result = controller.query(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'QueryController::query() should not throw error'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.expect(result).to.deep.equal({ missing: [<span class=\"hljs-string\">'courses'</span>] });",
      "isRoot": false,
      "uuid": "699a3c9b-4fc8-40f7-95c6-b831fd547674",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should not be able to set a valid zip that does not contain a valid dataset",
      "fullTitle": "Dataset Service Should not be able to set a valid zip that does not contain a valid dataset",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> zipContent = <span class=\"hljs-string\">'UEsDBAoAAAAIAAEiJEm/nBg/EQAAAA8AAAALAAAAY29udGVudC5vYmqrVspOrVSyUipLzClNVaoFAFBLAQIUAAoAAAAIAAEiJEm/nBg/EQAAAA8AAAALAAAAAAAAAAAAAAAAAAAAAABjb250ZW50Lm9ialBLBQYAAAAAAQABADkAAAA6AAAAAAA='</span>;<br><span class=\"hljs-keyword\">return</span> insightFacade.addDataset(<span class=\"hljs-string\">'courses'</span>, zipContent).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should get an error but got success: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expect 400 error'</span>);<br>    chai_1.assert(<span class=\"hljs-keyword\">typeof</span> result.body[<span class=\"hljs-string\">'error'</span>] == <span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'expect error field in body with error message string'</span>);<br>});",
      "isRoot": false,
      "uuid": "b72ac41f-2daa-46fa-82f9-3c1cfd17335e",
      "parentUUID": "b3e8c3e9-a323-45c2-be34-c756022c6cb6",
      "skipped": false
    },
    {
      "title": "Should not be able to set a dataset that is not a zip file",
      "fullTitle": "Dataset Service Should not be able to set a dataset that is not a zip file",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> zipContent = <span class=\"hljs-string\">'adfadsfad'</span>;<br><span class=\"hljs-keyword\">return</span> insightFacade.addDataset(<span class=\"hljs-string\">'courses'</span>, zipContent).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should get an error but got success: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expect 400 error'</span>);<br>    chai_1.assert(<span class=\"hljs-keyword\">typeof</span> result.body[<span class=\"hljs-string\">'error'</span>] == <span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'expect error field in body with error message string'</span>);<br>});",
      "isRoot": false,
      "uuid": "f9b5680d-9266-4473-95cf-51008a436a63",
      "parentUUID": "b3e8c3e9-a323-45c2-be34-c756022c6cb6",
      "skipped": false
    },
    {
      "title": "Should be able to find sections with an average > 90",
      "fullTitle": "Query Service Should be able to find sections with an average > 90",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "e3b2638c-ee41-43c6-9176-b6713e68d479",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department",
      "fullTitle": "Query Service Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department",
      "timedOut": false,
      "duration": 96,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "bfdcd286-edee-4491-b18a-451fae96ee20",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Should be able to find sections of CPSC 310",
      "fullTitle": "Query Service Should be able to find sections of CPSC 310",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "8c24b3c0-7988-4c43-bf2b-2bae2f0df7e0",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor",
      "fullTitle": "Query Service Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor",
      "timedOut": false,
      "duration": 59,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "6c5492f6-c0c7-46b7-b947-b7e7abc4e202",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Find the average for all cpsc courses",
      "fullTitle": "Query Service Find the average for all cpsc courses",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "871d1b56-a778-4190-abee-341c07923bea",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Find the average for all courses in the university, sort up (hardest to easiest)",
      "fullTitle": "Query Service Find the average for all courses in the university, sort up (hardest to easiest)",
      "timedOut": false,
      "duration": 437,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "f4b77dd4-eefc-43d2-8aab-340cdf5214cd",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Find the courses offered the most times",
      "fullTitle": "Query Service Find the courses offered the most times",
      "timedOut": false,
      "duration": 469,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "7d572594-ebc3-4908-96dd-6758f449bb0a",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Should not be able to submit an empty query",
      "fullTitle": "Query Service Should not be able to submit an empty query",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "abc20551-51ba-4ee4-90cf-65e5d38f6163",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "All underscore keys in GET must be in GROUP",
      "fullTitle": "Query Service All underscore keys in GET must be in GROUP",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_uuid\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "3efffc67-27e6-4c96-8f40-08e35b879b8e",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "All extra keys in GET must be in APPLY",
      "fullTitle": "Query Service All extra keys in GET must be in APPLY",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"abcde\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "fb0b6843-757f-4bc4-a83e-618012ec5506",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "APPLY rules must be unique per extra key",
      "fullTitle": "Query Service APPLY rules must be unique per extra key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "8c2dbde8-80a7-4c93-8c49-2fdb96fc9759",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "if key is in GROUP key must not be in APPLY",
      "fullTitle": "Query Service if key is in GROUP key must not be in APPLY",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_id\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "2cf8fb43-82dc-42cf-9407-80866c63c98b",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "if key is in APPLY, key must not be in GROUP",
      "fullTitle": "Query Service if key is in APPLY, key must not be in GROUP",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_avg\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "eece8eca-f195-4628-a2dc-81da91c740b5",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "no duplicate key in GROUP",
      "fullTitle": "Query Service no duplicate key in GROUP",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "1617400e-f9a6-40de-bfa2-ada11e8bb99a",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "GROUP key not in GET is allowed",
      "fullTitle": "Query Service GROUP key not in GET is allowed",
      "timedOut": false,
      "duration": 242,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: {},<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_dept\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">'expects 200 success'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not fail'</span>);<br>});",
      "isRoot": false,
      "uuid": "4a0e5b45-41ab-448d-9b38-e7fe9bcdbb03",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Should throw error on zip without any valid data file under courses",
      "fullTitle": "DatasetController Should throw error on zip without any valid data file under courses",
      "timedOut": false,
      "duration": 40,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Util_1.default.test(<span class=\"hljs-string\">'Creating dataset'</span>);<br><span class=\"hljs-keyword\">var</span> content = { key: <span class=\"hljs-string\">'value'</span> };<br><span class=\"hljs-keyword\">var</span> zip = <span class=\"hljs-keyword\">new</span> JSZip();<br>zip.file(<span class=\"hljs-string\">'content.obj'</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(content));<br><span class=\"hljs-keyword\">var</span> opts = {<br>    compression: <span class=\"hljs-string\">'deflate'</span>, compressionOptions: { level: <span class=\"hljs-number\">2</span> }, type: <span class=\"hljs-string\">'base64'</span><br>};<br><span class=\"hljs-keyword\">return</span> zip.generateAsync(opts).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    Util_1.default.test(<span class=\"hljs-string\">'Dataset created '</span>);<br>    Util_1.default.test(data);<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>    controller.process(<span class=\"hljs-string\">'courses'</span>, data).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>        chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"should throw error on zip without any valid data file under courses/\"</span>);<br>    }).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>        <span class=\"hljs-keyword\">throw</span> err;<br>    });<br>}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"should throw error on zip without any valid data file under courses/\"</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "4341cda4-ce26-4c92-9d24-28e1c10abe2d",
      "parentUUID": "05c351f7-0891-47fc-bfdf-fac39058d416",
      "skipped": false
    },
    {
      "title": "removeDataset::Should delete datasets",
      "fullTitle": "InsightFacade removeDataset::Should delete datasets",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> datasetController = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br><span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>Util_1.default.test(<span class=\"hljs-string\">'InsightFacade.removeDataset tests'</span>);<br>chai_1.expect(insightFacade.removeDataset(<span class=\"hljs-string\">'courses'</span>)) != <span class=\"hljs-literal\">null</span>;",
      "isRoot": false,
      "uuid": "b3e9b18a-29b9-4396-8c45-16b90f56c179",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "addDataset::('InsightFacade::removeDataset(..) - ERROR: ' + err.message",
      "fullTitle": "InsightFacade addDataset::('InsightFacade::removeDataset(..) - ERROR: ' + err.message",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> datasetController = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.addDataset(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "a2e50d36-45de-4723-8936-fa8bdebf6325",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "performQuery::('InsightFacade::performQuery(..) - ERROR: ' + err.message",
      "fullTitle": "InsightFacade performQuery::('InsightFacade::performQuery(..) - ERROR: ' + err.message",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"class_id\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "1933738c-923e-4afe-a679-164260704098",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "PerformQuery()::Should reject with 400 error",
      "fullTitle": "InsightFacade PerformQuery()::Should reject with 400 error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.removeDataset(<span class=\"hljs-string\">'class'</span>);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "6cacd44c-2a54-453c-8cf1-304e188c8c8e",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "deleteDataset()::Should reject with 400 error",
      "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'errorCase\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "8b774a2f-ce13-4aa9-8cfd-47edbf388c1b",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "deleteDataset()::Should reject with 400 error",
      "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'courses_nonsense\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_nothere\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "aebd4bdf-e57e-4ce2-bc71-2e2e9067f3ea",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "deleteDataset()::Should reject with 400 error",
      "fullTitle": "InsightFacade deleteDataset()::Should reject with 400 error",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage, 'courses_nonsense\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_id\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    <span class=\"hljs-keyword\">var</span> insightFacade = <span class=\"hljs-keyword\">new</span> InsightFacade_1.default;<br>    insightFacade.performQuery(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (reject) {<br>    chai_1.expect(reject);<br>}",
      "isRoot": false,
      "uuid": "4335f1aa-3b0e-457a-b9f9-0bcf691435a9",
      "parentUUID": "106aab29-30e5-4fd5-ab78-43a95b630459",
      "skipped": false
    },
    {
      "title": "Should return a StringFilter parsed object",
      "fullTitle": "QueryController Should return a StringFilter parsed object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">\"cpsc\"</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_dept: <span class=\"hljs-string\">'adhe'</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_dept: <span class=\"hljs-string\">'cpsc'</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_dept: <span class=\"hljs-number\">1234</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for adhe == cpsc'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for cpsc == cpsc'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 1234 == cpsc'</span>);",
      "isRoot": false,
      "uuid": "dd74bc00-8361-49a5-a188-638f6ef9b0d5",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a NumberFilter::GT parsed object",
      "fullTitle": "QueryController Should return a NumberFilter::GT parsed object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 89.99 &gt; 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.00 &gt; 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return false for 90.01 &gt; 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf &gt; 90'</span>);",
      "isRoot": false,
      "uuid": "0e41a1eb-9572-4252-94a9-3867e8809bdf",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a NumberFilter::EQ parsed object",
      "fullTitle": "QueryController Should return a NumberFilter::EQ parsed object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"EQ\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 89.99 == 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for 90.00 == 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.01 == 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf == 90'</span>);",
      "isRoot": false,
      "uuid": "c85b520e-8285-4a2d-bb81-da8d13226910",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a NumberFilter::LT parsed object",
      "fullTitle": "QueryController Should return a NumberFilter::LT parsed object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"LT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter.column).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for 89.99 &lt; 90'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.00 &lt; 90'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for 90.01 &lt; 90'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for asdf &lt; 90'</span>);",
      "isRoot": false,
      "uuid": "c0041b86-c145-463b-a455-6f98a846567c",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a LogicFilter::AND parsed object",
      "fullTitle": "QueryController Should return a LogicFilter::AND parsed object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = {<br>    <span class=\"hljs-string\">\"AND\"</span>: [<br>        { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } },<br>        { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } }]<br>};<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">70</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">'cpsc'</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">71</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-number\">72</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row5 = { courses_avg: <span class=\"hljs-string\">'asdf'</span>, courses_dept: <span class=\"hljs-string\">\"asdf\"</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and adhe == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 71 &gt; 70 and adhe == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and cpsc == cpsc are not both true'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 71 &gt; 70 and cpsc == cpsc are both true'</span>);<br>chai_1.assert(filter.test(row5) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because asdf &gt; 70 and asdf == cpsc are not both true'</span>);",
      "isRoot": false,
      "uuid": "285dcb80-243e-49cd-af47-3736fb725afa",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a StringFilter::OR parsed object",
      "fullTitle": "QueryController Should return a StringFilter::OR parsed object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = {<br>    <span class=\"hljs-string\">\"OR\"</span>: [<br>        { <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } },<br>        { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } }]<br>};<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">70</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_dept'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'children'</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'pattern'</span>]).to.equal(<span class=\"hljs-string\">'cpsc'</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">71</span>, courses_dept: <span class=\"hljs-string\">\"adhe\"</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">58</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-number\">72</span>, courses_dept: <span class=\"hljs-string\">\"cpsc\"</span> };<br><span class=\"hljs-keyword\">var</span> row5 = { courses_avg: <span class=\"hljs-string\">'asdf'</span>, courses_dept: <span class=\"hljs-string\">\"asdf\"</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because 58 &gt; 70 and adhe == cpsc are both false'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 71 &gt; 70 and adhe == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 58 &gt; 70 and cpsc == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true because 72 &gt; 70 and cpsc == cpsc are not both false'</span>);<br>chai_1.assert(filter.test(row5) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false because asdf &gt; 70 and asdf == cpsc are both false'</span>);",
      "isRoot": false,
      "uuid": "9a69fcbd-6007-47ca-a095-2fdb74a98de0",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return a NegationFilter parsed object",
      "fullTitle": "QueryController Should return a NegationFilter parsed object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"LT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> } } };<br><span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>Util_1.default.test(<span class=\"hljs-string\">'Parsed filter: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(filter));<br>chai_1.expect(filter[<span class=\"hljs-string\">'child'</span>][<span class=\"hljs-string\">'column'</span>]).to.equal(<span class=\"hljs-string\">'courses_avg'</span>);<br>chai_1.expect(filter[<span class=\"hljs-string\">'child'</span>][<span class=\"hljs-string\">'value'</span>]).to.equal(<span class=\"hljs-number\">90</span>);<br><span class=\"hljs-keyword\">var</span> row1 = { courses_avg: <span class=\"hljs-number\">89.99</span> };<br><span class=\"hljs-keyword\">var</span> row2 = { courses_avg: <span class=\"hljs-number\">90.00</span> };<br><span class=\"hljs-keyword\">var</span> row3 = { courses_avg: <span class=\"hljs-number\">90.01</span> };<br><span class=\"hljs-keyword\">var</span> row4 = { courses_avg: <span class=\"hljs-string\">'asdf'</span> };<br>chai_1.assert(filter.test(row1) === <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should return false for !(89.99 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row2) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(90.00 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row3) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(90.01 &lt; 90)'</span>);<br>chai_1.assert(filter.test(row4) === <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'should return true for !(asdf &lt; 90)'</span>);",
      "isRoot": false,
      "uuid": "9bf08666-a104-4797-9c1a-80120d726166",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error for null WHERE Object",
      "fullTitle": "QueryController Should return error for null WHERE Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "6806b0b8-1879-4c07-91ad-6ac4a19faedc",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error for multiple keys in WHERE",
      "fullTitle": "QueryController Should return error for multiple keys in WHERE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> }, <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "c81c0a6c-cda8-4d3e-ad36-330b9615371a",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error for unknown key in WHERE",
      "fullTitle": "QueryController Should return error for unknown key in WHERE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"HOW\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.Filter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "fe143ad8-20f5-4c5b-985c-a76357a17fe6",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error for undefined WHERE Object",
      "fullTitle": "QueryController Should return error for undefined WHERE Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">undefined</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'Filter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'Filter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "81e7957a-e495-4aa6-b5a8-4a5d23d9c28b",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "LogicFilter should return error if not given array",
      "fullTitle": "QueryController LogicFilter should return error if not given array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">'IS'</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "a83efda8-3c7c-4057-90cf-888af29af759",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "LogicFilter should return error if given empty array",
      "fullTitle": "QueryController LogicFilter should return error if given empty array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f2e88754-1934-4eae-abb6-735a7b87e315",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "LogicFilter should return error for unknown key",
      "fullTitle": "QueryController LogicFilter should return error for unknown key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'XOR'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "2f9a07aa-f328-44fb-aba5-e640f5eb66cb",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error if leaf filter has no key-value pairs",
      "fullTitle": "QueryController Should return error if leaf filter has no key-value pairs",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: {} }, { <span class=\"hljs-string\">\"IS\"</span>: {} }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'AND'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "33271c72-0857-4c26-b645-326bc78be883",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should return error if LogicFilter.parse() given invalid key",
      "fullTitle": "QueryController Should return error if LogicFilter.parse() given invalid key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = [{ <span class=\"hljs-string\">\"GT\"</span>: { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">70</span> } }, { <span class=\"hljs-string\">\"NOT\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"adhe\"</span> } } }];<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.LogicFilter.parse(<span class=\"hljs-string\">'notValid'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f2d73550-585f-4ac7-a8e7-7f32a0b7ba84",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for empty key",
      "fullTitle": "QueryController NumberFilter:: Should return error for empty key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"90\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">''</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "a4a4b693-125f-4d75-b030-5128eed69245",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for undefined Object",
      "fullTitle": "QueryController NumberFilter:: Should return error for undefined Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'LogicFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'LogicFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "7132d1a7-68ab-47ff-9ae3-d7734e9dfb1b",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for NaN",
      "fullTitle": "QueryController NumberFilter:: Should return error for NaN",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"abc\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "a8d9ed8c-bf6a-4dc2-9c99-4b2ae1a876bc",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for having more than one key",
      "fullTitle": "QueryController NumberFilter:: Should return error for having more than one key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span>, <span class=\"hljs-string\">\"courses_audit\"</span>: <span class=\"hljs-number\">10</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "e91b9a32-415d-4ee6-bcab-687285d0f62e",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for undefined value",
      "fullTitle": "QueryController NumberFilter:: Should return error for undefined value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-literal\">undefined</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "14c23e52-fa8c-45be-ab8a-222601033d54",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NumberFilter:: Should return error for unknown key",
      "fullTitle": "QueryController NumberFilter:: Should return error for unknown key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-number\">90</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NumberFilter.parse(<span class=\"hljs-string\">'unknownKey'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NumberFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "1c19fe3d-23b6-403d-a578-e2afbe316d06",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "StringFilter:: Should return error for undefined Object",
      "fullTitle": "QueryController StringFilter:: Should return error for undefined Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'LT'</span>, whereObject);<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NumberFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "bd97e54e-7c3a-4e97-848b-a72161728e60",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "StringFilter:: Should return error for more than one key",
      "fullTitle": "QueryController StringFilter:: Should return error for more than one key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span>, <span class=\"hljs-string\">\"courses_avg\"</span>: <span class=\"hljs-string\">\"90\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'IS'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "3e7dc56e-1640-4d50-bc45-d6ab75fe59ed",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "StringFilter:: Should return error if no key-value pair given",
      "fullTitle": "QueryController StringFilter:: Should return error if no key-value pair given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = {};<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'IS'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "e50ef2dc-4753-447e-9817-fcb8f3c42bc8",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "StringFilter:: Should return error for unknown key",
      "fullTitle": "QueryController StringFilter:: Should return error for unknown key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_key\"</span>: <span class=\"hljs-string\">\"\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.StringFilter.parse(<span class=\"hljs-string\">'NO'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'StringFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'StringFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "c3e00533-8b94-4e36-9f7e-bcabe5c702ed",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NegationFilter:: Should return error for null",
      "fullTitle": "QueryController NegationFilter:: Should return error for null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NegationFilter.parse(<span class=\"hljs-string\">'NOT'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NegationFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NegationFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "0457ffed-4444-4ebe-a6ce-0607f333e4a7",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "NegationFilter:: Should return error for unknown key",
      "fullTitle": "QueryController NegationFilter:: Should return error for unknown key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> whereObject = { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> };<br>    <span class=\"hljs-keyword\">var</span> filter = QueryController_2.NegationFilter.parse(<span class=\"hljs-string\">'WHO'</span>, whereObject);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'NegationFilter.parse() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'NegationFilter.parse() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "16a69ead-a6a3-4b3e-80c1-a0a997c8c026",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::query.GET should be an array of string",
      "fullTitle": "QueryController QueryController::query.GET should be an array of string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">99</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: <span class=\"hljs-string\">'notArray'</span>,<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "a9aa7c20-5b26-42fa-b45c-376887bfb6fa",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::query.ORDER should be string or object and have key(s) in GET",
      "fullTitle": "QueryController QueryController::query.ORDER should be string or object and have key(s) in GET",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"ORDER\"</span>: <span class=\"hljs-string\">'courses_audit'</span>,<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"notInGET\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);<br>success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: <span class=\"hljs-number\">98</span>,<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "550a84df-b1c3-449b-898e-9db03204a13b",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP should be array not object",
      "fullTitle": "QueryController QueryController::GROUP should be array not object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_dept\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: { <span class=\"hljs-string\">'GROUP'</span>: <span class=\"hljs-number\">768</span> },<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "554ac8b4-5f4b-451b-9dcd-4223105d0e86",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP array should not be empty",
      "fullTitle": "QueryController QueryController::GROUP array should not be empty",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "9c5ee60e-3cac-4aa1-b3c4-95c94b3619e5",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP should be array of string not array of object",
      "fullTitle": "QueryController QueryController::GROUP should be array of string not array of object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [{ <span class=\"hljs-string\">\"okay\"</span>: <span class=\"hljs-number\">789</span> }],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f0b42db2-cb66-427b-9483-0f616e01ac51",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: GROUP should be array of string not array of number",
      "fullTitle": "QueryController QueryController:: GROUP should be array of string not array of number",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">77</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "32bee17b-2cc4-4e43-b7cb-ceca1c02678b",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GET keys should be in GROUP or APPLY",
      "fullTitle": "QueryController QueryController::GET keys should be in GROUP or APPLY",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_audit\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "5760f731-ef73-467d-8c65-18345f132ddf",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::APPLY should be array not object",
      "fullTitle": "QueryController QueryController::APPLY should be array not object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: {},<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "c6eb2805-74c2-43e4-8678-9235c770e34e",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should be array not number",
      "fullTitle": "QueryController QueryController:: APPLY should be array not number",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: <span class=\"hljs-number\">76</span>,<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "d9f8e983-19f9-44aa-a35e-b6ed0ddfa824",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::APPLY should be array of object not array of string",
      "fullTitle": "QueryController QueryController::APPLY should be array of object not array of string",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [<span class=\"hljs-string\">'notObject'</span>],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "4f1c4665-218b-4380-935a-04f2a0c5756e",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should be array of object not array of number",
      "fullTitle": "QueryController QueryController:: APPLY should be array of object not array of number",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [<span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">88</span>],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "9fa17e1a-1c5e-4b01-b32c-6fe4cac22ce4",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP and APPLY should be present if extra columns provided in GET",
      "fullTitle": "QueryController QueryController::GROUP and APPLY should be present if extra columns provided in GET",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "77191d57-943a-464e-9b27-67544979291a",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::APPLY should be present if GROUP is present",
      "fullTitle": "QueryController QueryController::APPLY should be present if GROUP is present",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "ac1526b4-7a75-4cba-adb3-19842e7c5020",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::GROUP should be present if APPLY is present",
      "fullTitle": "QueryController QueryController::GROUP should be present if APPLY is present",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    <span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br>    <span class=\"hljs-keyword\">var</span> query = {<br>        <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>        <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>        <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>        <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>        <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>    };<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "78c0cecc-bf65-4491-8373-8f7542111f46",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: isValid expected to be false when null",
      "fullTitle": "QueryController QueryController:: isValid expected to be false when null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = <span class=\"hljs-literal\">null</span>;<br>chai_1.expect(QueryController_1.default.isValid(query)).to.be.false;",
      "isRoot": false,
      "uuid": "0837fc3d-bc6f-4a15-80c6-d1d5b4008fc3",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: isValid expected to be true when not null",
      "fullTitle": "QueryController QueryController:: isValid expected to be true when not null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"notInGET\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br>chai_1.expect(QueryController_1.default.isValid(query)).to.be.true;",
      "isRoot": false,
      "uuid": "fe063c55-489d-490b-9812-a20fe822ff37",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER keys should be array",
      "fullTitle": "QueryController QueryController:: ORDER keys should be array",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: <span class=\"hljs-string\">\"notInGET\"</span> },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "833bfdda-80e9-4e9c-be0d-83fad6144825",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER keys array should not be empty",
      "fullTitle": "QueryController QueryController:: ORDER keys array should not be empty",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "0b4d20a2-c3cd-4227-a2ed-bc6c829a8d8f",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER keys should be in GET",
      "fullTitle": "QueryController QueryController:: ORDER keys should be in GET",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">'asdf'</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f5468b69-2cbf-4f9c-b187-c0c34feb1c6f",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER keys should be array of string",
      "fullTitle": "QueryController QueryController:: ORDER keys should be array of string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">456</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "f1316821-4366-48da-a5c7-83e518162264",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: ORDER direction should be UP or DOWN",
      "fullTitle": "QueryController QueryController:: ORDER direction should be UP or DOWN",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"asdf\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">'courses_id'</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "a2597ce8-1232-428c-a8bd-4c2e36ce36a2",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should not have duplicate key",
      "fullTitle": "QueryController QueryController:: APPLY should not have duplicate key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "51a8bd04-c96f-4ce8-b1a4-60c435b392b6",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should not have duplicate key",
      "fullTitle": "QueryController QueryController:: APPLY should not have duplicate key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "19f33d68-7ffd-483a-83cb-a65b3d13b255",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should be present if non-underscore key in GET",
      "fullTitle": "QueryController QueryController:: APPLY should be present if non-underscore key in GET",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "8440291e-70d2-48ed-87b8-71a9e22fb117",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: APPLY should be present if GROUP is present",
      "fullTitle": "QueryController QueryController:: APPLY should be present if GROUP is present",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "ea2a985b-ef20-4fa9-b3c9-7221c9ca9f9b",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController::APPLY should not be present without GROUP",
      "fullTitle": "QueryController QueryController::APPLY should not be present without GROUP",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "86a3c04d-9046-4758-919e-b3f855f90a27",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: each object in APPLY must have exactly one key",
      "fullTitle": "QueryController QueryController:: each object in APPLY must have exactly one key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"coursesdept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> }, <span class=\"hljs-string\">\"courseBlah\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_id\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "1d9733a3-fce8-4f10-9a45-3dc2b2f061b7",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: each object in APPLY must have exactly one operation",
      "fullTitle": "QueryController QueryController:: each object in APPLY must have exactly one operation",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span>, <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_audit\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "cbb636c7-5c5d-48fd-af4f-eb3476f4070c",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: cannot apply MAX to string column",
      "fullTitle": "QueryController QueryController:: cannot apply MAX to string column",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"MAX\"</span>: <span class=\"hljs-string\">\"courses_instructor\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "600762d7-3a9a-4b50-8ee1-f4c2fe968980",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: cannot apply operation that is not MAX/MIN/AVG/COUNT",
      "fullTitle": "QueryController QueryController:: cannot apply operation that is not MAX/MIN/AVG/COUNT",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"LOL\"</span>: <span class=\"hljs-string\">\"courses_uuid\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "c1366e18-9c1f-4690-b74c-4623116c36cc",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: WHERE clause must reference columns in dataset",
      "fullTitle": "QueryController QueryController:: WHERE clause must reference columns in dataset",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> success = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default(dataset);<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"abcde\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">try</span> {<br>    controller.query(query);<br>    success = <span class=\"hljs-literal\">true</span>;<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(err, <span class=\"hljs-string\">'QueryController::query() should throw error object'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.assert(!success, <span class=\"hljs-string\">'QueryController::query() should not be successful'</span>);",
      "isRoot": false,
      "uuid": "32d9b669-7d59-40ad-b9db-79b8f8b54698",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "QueryController:: when dataset missing, should return 424 with list of missing dataset",
      "fullTitle": "QueryController QueryController:: when dataset missing, should return 424 with list of missing dataset",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> QueryController_1.default({ <span class=\"hljs-string\">'test'</span>: [] });<br><span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span> };<br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-literal\">undefined</span>;<br><span class=\"hljs-keyword\">try</span> {<br>    result = controller.query(query);<br>}<br><span class=\"hljs-keyword\">catch</span> (err) {<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'QueryController::query() should not throw error'</span>);<br>    Util_1.default.test(<span class=\"hljs-string\">\"Caught error: \"</span> + err.message);<br>}<br>chai_1.expect(result).to.deep.equal({ missing: [<span class=\"hljs-string\">'courses'</span>] });",
      "isRoot": false,
      "uuid": "e757bf77-1c0d-4c8e-8eb2-89a896ad9b06",
      "parentUUID": "178888dc-84f3-400b-9cad-22afb41a02b4",
      "skipped": false
    },
    {
      "title": "Should not be able to set a valid zip that does not contain a valid dataset",
      "fullTitle": "Dataset Service Should not be able to set a valid zip that does not contain a valid dataset",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> zipContent = <span class=\"hljs-string\">'UEsDBAoAAAAIAAEiJEm/nBg/EQAAAA8AAAALAAAAY29udGVudC5vYmqrVspOrVSyUipLzClNVaoFAFBLAQIUAAoAAAAIAAEiJEm/nBg/EQAAAA8AAAALAAAAAAAAAAAAAAAAAAAAAABjb250ZW50Lm9ialBLBQYAAAAAAQABADkAAAA6AAAAAAA='</span>;<br><span class=\"hljs-keyword\">return</span> insightFacade.addDataset(<span class=\"hljs-string\">'courses'</span>, zipContent).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should get an error but got success: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expect 400 error'</span>);<br>    chai_1.assert(<span class=\"hljs-keyword\">typeof</span> result.body[<span class=\"hljs-string\">'error'</span>] == <span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'expect error field in body with error message string'</span>);<br>});",
      "isRoot": false,
      "uuid": "8c79b31b-b800-45cb-8075-8e53555389d6",
      "parentUUID": "b3e8c3e9-a323-45c2-be34-c756022c6cb6",
      "skipped": false
    },
    {
      "title": "Should not be able to set a dataset that is not a zip file",
      "fullTitle": "Dataset Service Should not be able to set a dataset that is not a zip file",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> zipContent = <span class=\"hljs-string\">'adfadsfad'</span>;<br><span class=\"hljs-keyword\">return</span> insightFacade.addDataset(<span class=\"hljs-string\">'courses'</span>, zipContent).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'should get an error but got success: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expect 400 error'</span>);<br>    chai_1.assert(<span class=\"hljs-keyword\">typeof</span> result.body[<span class=\"hljs-string\">'error'</span>] == <span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'expect error field in body with error message string'</span>);<br>});",
      "isRoot": false,
      "uuid": "155b798a-0ebd-41db-ad28-da245cd0dc05",
      "parentUUID": "b3e8c3e9-a323-45c2-be34-c756022c6cb6",
      "skipped": false
    },
    {
      "title": "Should be able to find sections with an average > 90",
      "fullTitle": "Query Service Should be able to find sections with an average > 90",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "fc7fc71a-3e2c-4fd3-8627-faf1bc6971d1",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department",
      "fullTitle": "Query Service Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department",
      "timedOut": false,
      "duration": 96,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "c755eab2-238d-4526-bef3-d8edc9e57d0f",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Should be able to find sections of CPSC 310",
      "fullTitle": "Query Service Should be able to find sections of CPSC 310",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "534ce092-e745-4754-a11e-a0789881d5c1",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor",
      "fullTitle": "Query Service Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor",
      "timedOut": false,
      "duration": 59,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "1859114d-7e2a-42d5-97eb-45acc22e5315",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Find the average for all cpsc courses",
      "fullTitle": "Query Service Find the average for all cpsc courses",
      "timedOut": false,
      "duration": 51,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "609f0ab0-c50a-4cc3-8930-088abd7d01c8",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Find the average for all courses in the university, sort up (hardest to easiest)",
      "fullTitle": "Query Service Find the average for all courses in the university, sort up (hardest to easiest)",
      "timedOut": false,
      "duration": 437,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "097e1d8a-18f0-451e-83ce-ed8893bf52f4",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Find the courses offered the most times",
      "fullTitle": "Query Service Find the courses offered the most times",
      "timedOut": false,
      "duration": 469,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> insightFacade.performQuery((test[<span class=\"hljs-string\">'query'</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'successful query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>    chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &lt; <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 2xx code when promise fulfilled in IInsightFacade.performQuery()'</span>);<br>    Joi.assert(result.body, types);<br>    <span class=\"hljs-keyword\">var</span> json = result.body;<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.result).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    <span class=\"hljs-keyword\">var</span> a = lodash.countBy(json[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> b = lodash.countBy(expectedResult[<span class=\"hljs-string\">\"result\"</span>], <span class=\"hljs-built_in\">JSON</span>.stringify);<br>    <span class=\"hljs-keyword\">var</span> c = lodash.isEqual(a, b);<br>    <span class=\"hljs-keyword\">if</span> (!c) {<br>        Util_1.default.test(<span class=\"hljs-string\">\"Expected:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(expectedResult[<span class=\"hljs-string\">\"result\"</span>]);<br>        Util_1.default.test(<span class=\"hljs-string\">\"Received:\"</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(json[<span class=\"hljs-string\">\"result\"</span>]);<br>        <span class=\"hljs-keyword\">var</span> zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> b) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>        zcnt = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">in</span> a) {<br>            <span class=\"hljs-keyword\">if</span> (a[z] != b[z]) {<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Failure case \"</span> + zcnt + <span class=\"hljs-string\">\": \"</span> + z);<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Expected = \"</span> + b[z] + <span class=\"hljs-string\">\", actual = \"</span> + a[z]);<br>                zcnt++;<br>                <span class=\"hljs-keyword\">if</span> (zcnt == <span class=\"hljs-number\">50</span>) {<br>                    <span class=\"hljs-keyword\">break</span>;<br>                }<br>            }<br>        }<br>    }<br>    chai_1.assert(c, <span class=\"hljs-string\">'results do not contain the same entries'</span>);<br>    chai_1.expect(<span class=\"hljs-keyword\">typeof</span> json.render).not.to.equal(<span class=\"hljs-string\">'undefined'</span>);<br>    chai_1.assert(lodash.isEqual(json[<span class=\"hljs-string\">\"render\"</span>], expectedResult[<span class=\"hljs-string\">\"render\"</span>]), <span class=\"hljs-string\">'render should be '</span> + expectedResult[<span class=\"hljs-string\">'render'</span>] + <span class=\"hljs-string\">' but got '</span> + json[<span class=\"hljs-string\">'render'</span>]);<br>    <span class=\"hljs-keyword\">var</span> order = test[<span class=\"hljs-string\">\"query\"</span>][<span class=\"hljs-string\">\"ORDER\"</span>];<br>    <span class=\"hljs-keyword\">if</span> (order != <span class=\"hljs-literal\">undefined</span>) {<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> order === <span class=\"hljs-string\">'string'</span>) {<br>            <span class=\"hljs-keyword\">var</span> previous = -<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _i = <span class=\"hljs-number\">0</span>, _a = json[<span class=\"hljs-string\">\"result\"</span>]; _i &lt; _a.length; _i++) {<br>                <span class=\"hljs-keyword\">var</span> entry = _a[_i];<br>                <span class=\"hljs-keyword\">var</span> current = entry[order];<br>                chai_1.assert.isAtMost(previous, current, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-keyword\">var</span> previous = {};<br>            <span class=\"hljs-keyword\">var</span> previousEntry = {};<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">0</span>; z &lt; json[<span class=\"hljs-string\">\"result\"</span>].length; z++) {<br>                <span class=\"hljs-keyword\">var</span> entry = json[<span class=\"hljs-string\">\"result\"</span>][z];<br>                <span class=\"hljs-keyword\">var</span> current = {};<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _b = <span class=\"hljs-number\">0</span>, _c = order.keys; _b &lt; _c.length; _b++) {<br>                    <span class=\"hljs-keyword\">var</span> k = _c[_b];<br>                    current[k] = entry[k];<br>                }<br>                <span class=\"hljs-keyword\">if</span> (z &gt; <span class=\"hljs-number\">0</span>) {<br>                    <span class=\"hljs-keyword\">var</span> comp = <span class=\"hljs-number\">0</span>;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> _d = <span class=\"hljs-number\">0</span>, _e = order[<span class=\"hljs-string\">\"keys\"</span>]; _d &lt; _e.length; _d++) {<br>                        <span class=\"hljs-keyword\">var</span> k = _e[_d];<br>                        <span class=\"hljs-keyword\">if</span> (previous[k] &lt; current[k]) {<br>                            comp = -<span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (previous[k] &gt; current[k]) {<br>                            comp = <span class=\"hljs-number\">1</span>;<br>                            <span class=\"hljs-keyword\">break</span>;<br>                        }<br>                    }<br>                    <span class=\"hljs-keyword\">if</span> (order[<span class=\"hljs-string\">\"dir\"</span>] == <span class=\"hljs-string\">'UP'</span>) {<br>                        chai_1.assert.isAtMost(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                    <span class=\"hljs-keyword\">else</span> {<br>                        chai_1.assert.isAtLeast(comp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(entry) + <span class=\"hljs-string\">\" should appear before \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(previousEntry));<br>                    }<br>                }<br>                previous = current;<br>                previousEntry = entry;<br>            }<br>        }<br>    }<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (result.code) {<br>        Util_1.default.test(<span class=\"hljs-string\">'Got failure response: '</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(result));<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] == result.code, <span class=\"hljs-string\">'failed query: expect '</span> + test[<span class=\"hljs-string\">'expected-status'</span>] + <span class=\"hljs-string\">' but got code '</span> + result.code);<br>        chai_1.assert(test[<span class=\"hljs-string\">'expected-status'</span>] &gt;= <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 4xx code when promise rejected in IInsightFacade.performQuery()'</span>);<br>        Joi.assert(result.body, types);<br>    }<br>    <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-keyword\">throw</span> result;<br>    }<br>});",
      "isRoot": false,
      "uuid": "9668d25c-0fb9-4f17-9ecb-6c2575adbe59",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "Should not be able to submit an empty query",
      "fullTitle": "Query Service Should not be able to submit an empty query",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "d6779e7e-034e-49b4-b87f-a233d48763f4",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "All underscore keys in GET must be in GROUP",
      "fullTitle": "Query Service All underscore keys in GET must be in GROUP",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_uuid\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "d9cc4c29-e3fe-4ef8-ab91-20174db07c24",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "All extra keys in GET must be in APPLY",
      "fullTitle": "Query Service All extra keys in GET must be in APPLY",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"abcde\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "7d90fee4-f541-493b-a1d8-87461a5cb189",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "APPLY rules must be unique per extra key",
      "fullTitle": "Query Service APPLY rules must be unique per extra key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }, { <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "6dbdcce3-474e-41a1-bf14-b6a5ccc13d8c",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "if key is in GROUP key must not be in APPLY",
      "fullTitle": "Query Service if key is in GROUP key must not be in APPLY",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_id\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "b83a4a1a-59a7-4d10-acb8-2a07f8a8f084",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "if key is in APPLY, key must not be in GROUP",
      "fullTitle": "Query Service if key is in APPLY, key must not be in GROUP",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_avg\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "eff7d2e7-7b2d-47e7-a972-37ec12d341a5",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "no duplicate key in GROUP",
      "fullTitle": "Query Service no duplicate key in GROUP",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: { <span class=\"hljs-string\">\"IS\"</span>: { <span class=\"hljs-string\">\"courses_dept\"</span>: <span class=\"hljs-string\">\"cpsc\"</span> } },<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not succeed'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">'expects 400 error'</span>);<br>});",
      "isRoot": false,
      "uuid": "c648b060-3e5b-4c30-bad7-ec22a99628ef",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    },
    {
      "title": "GROUP key not in GET is allowed",
      "fullTitle": "Query Service GROUP key not in GET is allowed",
      "timedOut": false,
      "duration": 242,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> query = {<br>    <span class=\"hljs-string\">\"GET\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courseAverage\"</span>],<br>    <span class=\"hljs-string\">\"WHERE\"</span>: {},<br>    <span class=\"hljs-string\">\"GROUP\"</span>: [<span class=\"hljs-string\">\"courses_id\"</span>, <span class=\"hljs-string\">\"courses_dept\"</span>],<br>    <span class=\"hljs-string\">\"APPLY\"</span>: [{ <span class=\"hljs-string\">\"courseAverage\"</span>: { <span class=\"hljs-string\">\"AVG\"</span>: <span class=\"hljs-string\">\"courses_avg\"</span> } }],<br>    <span class=\"hljs-string\">\"ORDER\"</span>: { <span class=\"hljs-string\">\"dir\"</span>: <span class=\"hljs-string\">\"UP\"</span>, <span class=\"hljs-string\">\"keys\"</span>: [<span class=\"hljs-string\">\"courseAverage\"</span>, <span class=\"hljs-string\">\"courses_id\"</span>] },<br>    <span class=\"hljs-string\">\"AS\"</span>: <span class=\"hljs-string\">\"TABLE\"</span><br>};<br><span class=\"hljs-keyword\">return</span> insightFacade.performQuery(query).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(result.code == <span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">'expects 200 success'</span>);<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{<br>    chai_1.assert(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'query should not fail'</span>);<br>});",
      "isRoot": false,
      "uuid": "1f1d1626-297a-473f-b31d-fc29ce8c2f6a",
      "parentUUID": "31447b11-0fce-4c8d-8158-39158cc71f8d",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "Should be able to process a rooms zip",
      "fullTitle": "DatasetController Should be able to process a rooms zip",
      "timedOut": false,
      "duration": 340,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> expectedObj = [<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'1012'</span>, rooms_name: <span class=\"hljs-string\">'ESB_1012'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">150</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Hybrid Furniture'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-1012'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'1013'</span>, rooms_name: <span class=\"hljs-string\">'ESB_1013'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">350</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-1013'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Earth Sciences Building'</span>, rooms_shortName: <span class=\"hljs-string\">'ESB'</span>,<br>        rooms_number: <span class=\"hljs-string\">'2012'</span>, rooms_name: <span class=\"hljs-string\">'ESB_2012'</span>,<br>        rooms_address: <span class=\"hljs-string\">'2207 Main Mall'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26274</span>, rooms_lon: -<span class=\"hljs-number\">123.25224</span>, rooms_seats: <span class=\"hljs-number\">80</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/ESB-2012'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'101'</span>, rooms_name: <span class=\"hljs-string\">'DMP_101'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">40</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-101'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'110'</span>, rooms_name: <span class=\"hljs-string\">'DMP_110'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">120</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-110'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'201'</span>, rooms_name: <span class=\"hljs-string\">'DMP_201'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">40</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-201'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'301'</span>, rooms_name: <span class=\"hljs-string\">'DMP_301'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">80</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-301'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Hugh Dempster Pavilion'</span>, rooms_shortName: <span class=\"hljs-string\">'DMP'</span>,<br>        rooms_number: <span class=\"hljs-string\">'310'</span>, rooms_name: <span class=\"hljs-string\">'DMP_310'</span>,<br>        rooms_address: <span class=\"hljs-string\">'6245 Agronomy Road V6T 1Z4'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.26125</span>, rooms_lon: -<span class=\"hljs-number\">123.24807</span>, rooms_seats: <span class=\"hljs-number\">160</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tables/Movable Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/DMP-310'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'100'</span>, rooms_name: <span class=\"hljs-string\">'MATH_100'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">224</span>,<br>        rooms_type: <span class=\"hljs-string\">'Tiered Large Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Fixed Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-100'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'102'</span>, rooms_name: <span class=\"hljs-string\">'MATH_102'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">60</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-102'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'104'</span>, rooms_name: <span class=\"hljs-string\">'MATH_104'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">48</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-104'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'105'</span>, rooms_name: <span class=\"hljs-string\">'MATH_105'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-105'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'202'</span>, rooms_name: <span class=\"hljs-string\">'MATH_202'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-202'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'203'</span>, rooms_name: <span class=\"hljs-string\">'MATH_203'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">48</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tables &amp; Chairs'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-203'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'204'</span>, rooms_name: <span class=\"hljs-string\">'MATH_204'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">30</span>,<br>        rooms_type: <span class=\"hljs-string\">'Open Design General Purpose'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-204'</span> },<br>    { rooms_fullName: <span class=\"hljs-string\">'Mathematics'</span>, rooms_shortName: <span class=\"hljs-string\">'MATH'</span>,<br>        rooms_number: <span class=\"hljs-string\">'225'</span>, rooms_name: <span class=\"hljs-string\">'MATH_225'</span>,<br>        rooms_address: <span class=\"hljs-string\">'1984 Mathematics Road'</span>,<br>        rooms_lat: <span class=\"hljs-number\">49.28273</span>, rooms_lon: -<span class=\"hljs-number\">123.12074</span>, rooms_seats: <span class=\"hljs-number\">25</span>,<br>        rooms_type: <span class=\"hljs-string\">'Small Group'</span>, rooms_furniture: <span class=\"hljs-string\">'Classroom-Movable Tablets'</span>,<br>        rooms_href: <span class=\"hljs-string\">'http://students.ubc.ca/campus/discover/buildings-and-classrooms/room/MATH-225'</span> },<br>];<br>Util_1.default.test(<span class=\"hljs-string\">\"Reading test zip file\"</span>);<br><span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-string\">'rooms'</span>;<br><span class=\"hljs-keyword\">var</span> content = fs.readFileSync(<span class=\"hljs-string\">\"./rooms-small.zip\"</span>).toString(<span class=\"hljs-string\">'base64'</span>);<br><span class=\"hljs-keyword\">var</span> controller = <span class=\"hljs-keyword\">new</span> DatasetController_1.default();<br>Util_1.default.test(<span class=\"hljs-string\">\"Finished reading test zip file, parsing zip...\"</span>);<br><span class=\"hljs-keyword\">return</span> controller.process(id, content).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resCode</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> controller.getDatasets().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">datasets</span>) </span>{<br>        chai_1.expect(datasets[id]).to.deep.equal(expectedObj);<br>    });<br>});",
      "err": {
        "name": "AssertionError",
        "message": "expected [ Array(16) ] to deeply equal [ Array(16) ]",
        "stack": "AssertionError: expected [ Array(16) ] to deeply equal [ Array(16) ]<br>    at Assertion.assertEqual (node_modules/chai/lib/chai/core/assertions.js:485:19)<br>    at Assertion.ctx.(anonymous function) [as equal] (node_modules/chai/lib/chai/utils/addMethod.js:41:25)<br>    at test/DatasetControllerSpec.js:141:53<br>    at process._tickCallback (internal/process/next_tick.js:103:7)"
      },
      "isRoot": false,
      "uuid": "4bce4068-0829-44c4-8801-21f7cf65a45a",
      "parentUUID": "05c351f7-0891-47fc-bfdf-fac39058d416",
      "skipped": false
    }
  ],
  "copyrightYear": 2016
}